.. autogenerated

***
ecs
***

module 'ecs'



*Source file: prog/gameLibs/ecs/scripts/sq/sqcoredaECS.cpp*

Usage::

  let { set_callback_timer, set_callback_timer_rt, clear_callback_timer, set_timer, clear_timer, BaseList, ListRO, List, COMP_FLAG_REPLICATED, COMP_FLAG_CHANGE_EVENT, INVALID_ENTITY_ID, EVCAST_UNICAST, EVCAST_BROADCAST, Event, SchemelessEvent, SQEvent, TemplateDB, EventsDB, Template, EntityManager, CompObjectRO, CompObject, CompArray, SqQuery, EntityId, _dbg_get_all_comps_inspect, _dbg_get_comp_val_inspect, obsolete_dbg_get_comp_val, get_comp_type, obsolete_dbg_set_comp_val, get_comp_flags, get_semantic_type, calc_hash, calc_hash_int, TYPE_NULL, TYPE_STRING, TYPE_INT8, TYPE_UINT8, TYPE_INT16, TYPE_UINT16, TYPE_INT, TYPE_UINT, TYPE_INT64, TYPE_UINT64, TYPE_FLOAT, TYPE_POINT2, TYPE_POINT3, TYPE_POINT4, TYPE_IPOINT2, TYPE_IPOINT3, TYPE_IPOINT4, TYPE_DPOINT3, TYPE_BOOL, TYPE_MATRIX, TYPE_EID, TYPE_COLOR, TYPE_OBJECT, TYPE_ARRAY, TYPE_SHARED_OBJECT, TYPE_SHARED_ARRAY, TYPE_INT_LIST, TYPE_UINT16_LIST, TYPE_STRING_LIST, TYPE_EID_LIST, TYPE_FLOAT_LIST, TYPE_POINT2_LIST, TYPE_POINT3_LIST, TYPE_POINT4_LIST, TYPE_IPOINT2_LIST, TYPE_IPOINT3_LIST, TYPE_IPOINT4_LIST, TYPE_BOOL_LIST, TYPE_TMATRIX_LIST, TYPE_COLOR_LIST, TYPE_INT64_LIST, TYPE_UINT64_LIST, TYPE_TAG, TYPE_AUTO, clear_vm_entity_systems, register_entity_system, modify_es_list, start_es_loading, end_es_loading, g_entity_mgr } = require("ecs")

or::

  from "ecs" import *

.. code-block:: sq

  //'ecs' exports:
  {
    function set_callback_timer(handler, interval, repeat): sqObject, float, bool -> Object
    function set_callback_timer_rt(handler, interval, repeat): sqObject, float, bool -> Object
    function clear_callback_timer(handler): sqObject -> null
    function set_timer(arg0): table -> _undocumented_
    function clear_timer(arg0): table -> _undocumented_
    class BaseList
    class ListRO
    class List
    value COMP_FLAG_REPLICATED
    value COMP_FLAG_CHANGE_EVENT
    value INVALID_ENTITY_ID
    value EVCAST_UNICAST
    value EVCAST_BROADCAST
    class Event
    class SchemelessEvent
    class SQEvent
    class TemplateDB
    class EventsDB
    class Template
    class EntityManager
    class CompObjectRO
    class CompObject
    class CompArray
    class SqQuery
    class EntityId
    function _dbg_get_all_comps_inspect(arg0): integer -> _undocumented_
    function _dbg_get_comp_val_inspect(arg0, arg1, ...): integer, string, any_type -> _undocumented_
    function obsolete_dbg_get_comp_val(arg0, arg1, ...): integer, string, any_type -> _undocumented_
    function get_comp_type(eid, comp_name): ecs::EntityId, string -> integer
    function obsolete_dbg_set_comp_val(arg0, arg1, ...): integer, string, any_type -> _undocumented_
    function get_comp_flags(eid, comp): ecs::EntityId, string -> integer
    function get_semantic_type(type_name): string -> component_type_t
    function calc_hash(arg0): string -> _undocumented_
    function calc_hash_int(arg0): string -> _undocumented_
    value TYPE_NULL
    const TYPE_STRING
    const TYPE_INT8
    const TYPE_UINT8
    const TYPE_INT16
    const TYPE_UINT16
    const TYPE_INT
    const TYPE_UINT
    const TYPE_INT64
    const TYPE_UINT64
    const TYPE_FLOAT
    const TYPE_POINT2
    const TYPE_POINT3
    const TYPE_POINT4
    const TYPE_IPOINT2
    const TYPE_IPOINT3
    const TYPE_IPOINT4
    const TYPE_DPOINT3
    const TYPE_BOOL
    const TYPE_MATRIX
    const TYPE_EID
    const TYPE_COLOR
    const TYPE_OBJECT
    const TYPE_ARRAY
    const TYPE_SHARED_OBJECT
    const TYPE_SHARED_ARRAY
    const TYPE_INT_LIST
    const TYPE_UINT16_LIST
    const TYPE_STRING_LIST
    const TYPE_EID_LIST
    const TYPE_FLOAT_LIST
    const TYPE_POINT2_LIST
    const TYPE_POINT3_LIST
    const TYPE_POINT4_LIST
    const TYPE_IPOINT2_LIST
    const TYPE_IPOINT3_LIST
    const TYPE_IPOINT4_LIST
    const TYPE_BOOL_LIST
    const TYPE_TMATRIX_LIST
    const TYPE_COLOR_LIST
    const TYPE_INT64_LIST
    const TYPE_UINT64_LIST
    const TYPE_TAG
    const TYPE_AUTO
    function clear_vm_entity_systems()
    function register_entity_system(arg0, arg1, arg2, arg3, ...): string, table, table, table or null, any_type -> _undocumented_
    function modify_es_list(arg0): closure_and_nativeclosure -> _undocumented_
    function start_es_loading()
    function end_es_loading()
    value g_entity_mgr
  }
  

.. sq:function:: function set_callback_timer(handler, interval, repeat)

  :param handler:  
  :type handler: sqObject

  :param interval:  
  :type interval: float

  :param repeat:  
  :type repeat: bool

  :return: Object

.. sq:function:: function set_callback_timer_rt(handler, interval, repeat)

  :param handler:  
  :type handler: sqObject

  :param interval:  
  :type interval: float

  :param repeat:  
  :type repeat: bool

  :return: Object

.. sq:function:: function clear_callback_timer(handler)

  :param handler:  
  :type handler: sqObject

  :return: null

.. sq:function:: function set_timer(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: table

  ``nparamscheck:2``

  ``typecheck mask: any_type, table``

.. sq:function:: function clear_timer(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: table

  ``nparamscheck:2``

  ``typecheck mask: any_type, table``

/;
}


void shutdown_timers(HSQUIRRELVM /*vm

--------------
class BaseList
--------------


    **This is not real class. Just all List classes has this methods!**

    Real classes are following:
      * CompIntList(RO)
      * CompUInt16List(RO)
      * CompStringList(RO)
      * CompEidList(RO)
      * CompFloatList(RO)
      * CompPoint2List(RO)
      * CompPoint3List(RO)
      * CompPoint4List(RO)
      * CompIPoint2List(RO)
      * CompIPoint3List(RO)
      * CompBoolList(RO)
      * CompTMatrixList(RO)
      * CompColorList(RO)
      * CompInt64List(RO)
      * CompUInt64List(RO)


.. sq:method:: BaseList()

.. sq:function:: operator BaseList._get(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: class_instance, any_type``

.. sq:function:: operator BaseList._nexti(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer or null``

.. sq:function:: method BaseList.len()

.. sq:function:: method BaseList.indexof(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, any_type, integer``

.. sq:function:: method BaseList.getAll(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method BaseList.isReadOnly(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method BaseList.listType(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

/;

  if (readonly)
    





---------------------------------
class ListRO extends ecs.BaseList
---------------------------------

    
    sqListClass //
      .SquirrelFunc("_set", readonly_method_error, 3, "xi.")
      .SquirrelFunc("append", readonly_method_error, -2, "x.i")
      .SquirrelFunc("insert", readonly_method_error, -3, "xi.i")
      .SquirrelFunc("remove", readonly_method_error, 2, "xi")
      .SquirrelFunc("pop", readonly_method_error, 1, "x")
      .SquirrelFunc("clear", readonly_method_error, 1, "x")
/*




-------------------------------
class List extends ecs.BaseList
-------------------------------

.. sq:function:: operator List._set(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance, integer, any_type``

.. sq:function:: method List.append(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, any_type, integer``

.. sq:function:: method List.insert(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: class_instance, integer, any_type, integer``

.. sq:function:: method List.remove(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method List.pop(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method List.clear()

/;

  tbl.Bind(type_name, sqListClass);
}

template <typename TypeRW, typename TypeRO, typename ItemType>
static void bind_list_type(HSQUIRRELVM vm, Sqrat::Table &tbl, const char *type_name)
{
  using TS = eastl::fixed_string<char, 256>;
bind_list_class<Sqrat::Class<TypeRO>, TypeRO, ItemType, /*ro





.. sq:attribute:: COMP_FLAG_REPLICATED

.. sq:attribute:: COMP_FLAG_CHANGE_EVENT

.. sq:attribute:: INVALID_ENTITY_ID

.. sq:attribute:: EVCAST_UNICAST

.. sq:attribute:: EVCAST_BROADCAST

-----------
class Event
-----------

.. sq:function:: method Event.getType()





-----------------------------------
class SchemelessEvent extends Event
-----------------------------------

.. sq:method:: SchemelessEvent()





-----------------------------------------
class SQEvent extends ecs.SchemelessEvent
-----------------------------------------

.. sq:method:: SQEvent()





----------------
class TemplateDB
----------------

.. sq:function:: method TemplateDB.getTemplateByName()

.. sq:function:: method TemplateDB.size()

.. sq:function:: method TemplateDB.getTemplateMetaInfo()

.. sq:function:: method TemplateDB.getComponentMetaInfo()

.. sq:function:: method TemplateDB.hasComponentMetaInfo()

/;

  





--------------
class EventsDB
--------------

  Sqrat::Class<EventsDB, Sqrat::NoConstructor<EventsDB>> sqEventsDB(vm, "EventsDB");
  sqEventsDB //
    .Func("findEvent", &EventsDB::findEvent)
    .Func("hasEventScheme", &EventsDB::hasEventScheme)
    .Func("getFieldsCount", &EventsDB::getFieldsCount)
    .Func("findFieldIndex", &EventsDB::findFieldIndex)
    .Func("getFieldName", &EventsDB::getFieldName)
    .Func("getFieldType", &EventsDB::getFieldType)
    .Func("getFieldOffset", &EventsDB::getFieldOffset)
    .SquirrelFunc("getEventFieldValue", evtdb_get_event_field, 4, ".xii")
/*




--------------
class Template
--------------

.. sq:function:: method Template.getName()

.. sq:function:: method Template.getBase()

.. sq:function:: method Template.getCompVal(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: method Template.getCompValNullable(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: method Template.hasComponent()

.. sq:function:: method Template.getNumParentTemplates()

.. sq:function:: method Template.getParentTemplate()

.. sq:function:: method Template.getComponentsNames(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method Template.getTags(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

/;


  typedef bool (EntityManager::*removeCompFunc)(EntityId, const char *);

  





-------------------
class EntityManager
-------------------

  Sqrat::Class<EntityManager, Sqrat::NoConstructor<EntityManager>> sqEntityManager(vm, "EntityManager");
  sqEntityManager //
    .Func("destroyEntity", (bool(EntityManager::*)(const ecs::EntityId &)) & EntityManager::destroyEntity)
    .Func("doesEntityExist", &EntityManager::doesEntityExist)
    .Func("getNumEntities", &EntityManager::getNumEntities)

    //.Func("getNumComponents", &EntityManager::getNumComponents)

    .SquirrelFunc("sendEvent", emgr_send_event, 3, "xix")
    .SquirrelFunc("broadcastEvent", emgr_bcast_event, 2, "xx")

    //.Func("getEntityTemplate", &EntityManager::getEntityTemplate)
    .Func("getEntityTemplateName", &EntityManager::getEntityTemplateName)
    .Func("getEntityFutureTemplateName", &EntityManager::getEntityFutureTemplateName)
    .GlobalFunc("getTemplateDB", emgr_get_tempate_db) // FIXME: sqrat binding is not supports returning references from member
                                                      // functions
    .GlobalFunc("getEventsDB", emgr_get_events_db)
    .SquirrelFunc("createEntity", create_entity, -3, "xstc|o")
    .SquirrelFunc("createEntitySync", create_entity_sync, -3, "xst|o")
    .SquirrelFunc("reCreateEntityFrom", recreate_entity, -4, "xistc|o")
    .SquirrelFunc("createTemplate", create_template, -3, "xstssis")
    .GlobalFunc("getComponentType", emgr_get_component_type)
    .GlobalFunc("getComponentTypeName", emgr_get_component_type_name)
    .GlobalFunc("getTypeName", emgr_get_type_name)
/*

.. sq:attribute:: var EntityManager.dt

.. sq:attribute:: var EntityManager.curTime

/;
  





  

------------------
class CompObjectRO
------------------

  Sqrat::Class<ecs::ObjectRO> sqCompObjectRO(vm, "CompObjectRO");
  sqCompObjectRO //
    .SquirrelFunc("isReadOnly", comp_is_readonly<true>, 1, "x")
.SquirrelFunc("getAll", comp_obj_get_all<ecs::ObjectRO, ecs::ArrayRO, /*RO

.. sq:function:: operator CompObjectRO._get(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: operator CompObjectRO._set(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance, string, any_type``

.. sq:function:: operator CompObjectRO._newslot(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance, string, any_type``

.. sq:function:: operator CompObjectRO._nexti(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string or null``

.. sq:function:: method CompObjectRO.remove(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  ``nparamscheck:2``

  ``typecheck mask: class_instance, string``

.. sq:function:: method CompObjectRO.len()

/;

  





-----------------------------------------
class CompObject extends ecs.CompObjectRO
-----------------------------------------

  
  Sqrat::DerivedClass<ecs::Object, ecs::ObjectRO> sqCompObject(vm, "CompObject");
  sqCompObject //
    .SquirrelFunc("isReadOnly", comp_is_readonly<false>, 1, "x")
    .SquirrelFunc("getAll", comp_obj_get_all<ecs::Object, ecs::Array, false>, 1, "x")
    .SquirrelFunc("_get", comp_obj_get<ecs::Object, false>, 2, "xs")
    .SquirrelFunc("_set", comp_obj_set<ecs::Object>, 3, "xs.")
    .SquirrelFunc("_newslot", comp_obj_set<ecs::Object>, 3, "xs.")
    .SquirrelFunc("_nexti", comp_obj_nexti<ecs::Object>, 2, "xs|o")
    .SquirrelFunc("remove", comp_obj_erase<ecs::Object>, 2, "xs")
    .GlobalFunc("len", comp_t_len<ecs::Object>)
/*

.. sq:function:: method CompObject.isReadOnly(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: method CompObject.getAll(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

.. sq:function:: operator CompObject._get(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: operator CompObject._set(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:3``

  ``typecheck mask: class_instance, integer, any_type``

.. sq:function:: operator CompObject._nexti(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer or null

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer or null``

.. sq:function:: method CompObject.len()

.. sq:function:: method CompObject.indexof(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, any_type, integer``

.. sq:function:: method CompObject.append(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, any_type, integer``

.. sq:function:: method CompObject.insert(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: class_instance, integer, any_type, integer``

.. sq:function:: method CompObject.remove(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer

  ``nparamscheck:2``

  ``typecheck mask: class_instance, integer``

.. sq:function:: method CompObject.pop(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  ``nparamscheck:1``

  ``typecheck mask: class_instance``

/;

  





---------------------------------------
class CompArray extends ecs.CompArrayRO
---------------------------------------

  
  Sqrat::DerivedClass<ecs::Array, ecs::ArrayRO> sqCompArray(vm, "CompArray");
  sqCompArray //
    .SquirrelFunc("isReadOnly", comp_is_readonly<false>, 1, "x")
    .SquirrelFunc("getAll", comp_arr_get_all<ecs::Object, ecs::Array, false>, 1, "x")
    .SquirrelFunc("_get", comp_arr_get<ecs::Array, false>, 2, "x.")
    .SquirrelFunc("_set", comp_arr_set<ecs::Array>, 3, "xi.")
    .SquirrelFunc("_nexti", comp_arr_nexti<ecs::Array>, 2, "xi|o")
    .GlobalFunc("len", comp_t_len<ecs::Array>)
    .SquirrelFunc("indexof", comp_arr_indexof<ecs::Array>, -2, "x.i")
    .SquirrelFunc("append", comp_arr_append<ecs::Array>, -2, "x.i")
    .SquirrelFunc("insert", comp_arr_insert<ecs::Array>, -3, "xi.i")
    .SquirrelFunc("remove", comp_arr_remove<ecs::Array>, 2, "xi")
    .SquirrelFunc("pop", comp_arr_pop<ecs::Array>, 1, "x")
    .GlobalFunc("clear", comp_arr_clear<ecs::Array>)
/*




-------------
class SqQuery
-------------

.. sq:method:: SqQuery(arg0, arg1, arg2, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: table

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: class_instance, string, table, string``

.. sq:function:: method SqQuery.perform(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer or closure_and_nativeclosure

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: closure_and_nativeclosure or string or null

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: string or null

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: class_instance, integer or closure_and_nativeclosure, closure_and_nativeclosure or string or null, string or null``

.. sq:function:: operator SqQuery._call(arg0, arg1, arg2, arg3, arg4, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer or closure_and_nativeclosure

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: closure_and_nativeclosure or string or null

  :param arg4: autodoc from typemask/paramscheck
  :type arg4: string or null

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: class_instance, any_type, integer or closure_and_nativeclosure, closure_and_nativeclosure or string or null, string or null``

/;

  





--------------
class EntityId
--------------

  Sqrat::Class<ecs::EntityId> sqEntityId(vm, "EntityId");
  sqEntityId.SquirrelCtor(eid_ctor, -1, "xi");

  Sqrat::DerivedClass<EventDataGetter, ecs::Event, Sqrat::NoConstructor<EventDataGetter>> sqEventGetterProxy(vm, "EventDataGetter");
  
  sqEventGetterProxy.Var("data", &EventDataGetter::sqData);
  




  tblEcs //
    .Func("get_component_name_by_idx", get_component_name_by_idx)
    .Func("get_component_name_by_hash", get_component_name_by_hash)
    .SquirrelFunc("register_sq_event", register_sq_event, -2, ".sb|ii|o")
/*

.. sq:function:: function _dbg_get_all_comps_inspect(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer

  ``nparamscheck:2``

  ``typecheck mask: any_type, integer``

.. sq:function:: function _dbg_get_comp_val_inspect(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, integer, string``

.. sq:function:: function obsolete_dbg_get_comp_val(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, integer, string``

.. sq:function:: function get_comp_type(eid, comp_name)

  :param eid:  
  :type eid: ecs::EntityId

  :param comp_name:  
  :type comp_name: string

  :return: integer

.. sq:function:: function obsolete_dbg_set_comp_val(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, integer, string``

.. sq:function:: function get_comp_flags(eid, comp)

  :param eid:  
  :type eid: ecs::EntityId

  :param comp:  
  :type comp: string

  :return: integer

.. sq:function:: function get_semantic_type(type_name)

  :param type_name:  
  :type type_name: string

  :return: component_type_t

.. sq:function:: function calc_hash(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function calc_hash_int(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:attribute:: TYPE_NULL

.. sq:attribute:: const TYPE_STRING

.. sq:attribute:: const TYPE_INT8

.. sq:attribute:: const TYPE_UINT8

.. sq:attribute:: const TYPE_INT16

.. sq:attribute:: const TYPE_UINT16

.. sq:attribute:: const TYPE_INT

.. sq:attribute:: const TYPE_UINT

.. sq:attribute:: const TYPE_INT64

.. sq:attribute:: const TYPE_UINT64

.. sq:attribute:: const TYPE_FLOAT

.. sq:attribute:: const TYPE_POINT2

.. sq:attribute:: const TYPE_POINT3

.. sq:attribute:: const TYPE_POINT4

.. sq:attribute:: const TYPE_IPOINT2

.. sq:attribute:: const TYPE_IPOINT3

.. sq:attribute:: const TYPE_IPOINT4

.. sq:attribute:: const TYPE_DPOINT3

.. sq:attribute:: const TYPE_BOOL

.. sq:attribute:: const TYPE_MATRIX

.. sq:attribute:: const TYPE_EID

.. sq:attribute:: const TYPE_COLOR

.. sq:attribute:: const TYPE_OBJECT

.. sq:attribute:: const TYPE_ARRAY

.. sq:attribute:: const TYPE_SHARED_OBJECT

.. sq:attribute:: const TYPE_SHARED_ARRAY

.. sq:attribute:: const TYPE_INT_LIST

.. sq:attribute:: const TYPE_UINT16_LIST

.. sq:attribute:: const TYPE_STRING_LIST

.. sq:attribute:: const TYPE_EID_LIST

.. sq:attribute:: const TYPE_FLOAT_LIST

.. sq:attribute:: const TYPE_POINT2_LIST

.. sq:attribute:: const TYPE_POINT3_LIST

.. sq:attribute:: const TYPE_POINT4_LIST

.. sq:attribute:: const TYPE_IPOINT2_LIST

.. sq:attribute:: const TYPE_IPOINT3_LIST

.. sq:attribute:: const TYPE_IPOINT4_LIST

.. sq:attribute:: const TYPE_BOOL_LIST

.. sq:attribute:: const TYPE_TMATRIX_LIST

.. sq:attribute:: const TYPE_COLOR_LIST

.. sq:attribute:: const TYPE_INT64_LIST

.. sq:attribute:: const TYPE_UINT64_LIST

.. sq:attribute:: const TYPE_TAG

.. sq:attribute:: const TYPE_AUTO

.. sq:function:: function clear_vm_entity_systems()

.. sq:function:: function register_entity_system(arg0, arg1, arg2, arg3, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: table

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: table

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: table or null

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-4``

  ``typecheck mask: any_type, string, table, table, table or null``

.. sq:function:: function modify_es_list(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: closure_and_nativeclosure

  ``nparamscheck:2``

  ``typecheck mask: any_type, closure_and_nativeclosure``

.. sq:function:: function start_es_loading()

.. sq:function:: function end_es_loading()

.. sq:attribute:: g_entity_mgr = instance of EntityManager class

  ``type: class_instance``


