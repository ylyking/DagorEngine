.. autogenerated

********
settings
********

module 'settings'



*Source file: prog/daNetGame/main/settings.cpp*

Usage::

  let { get_setting_by_blk_path, set_setting_by_blk_path, set_setting_by_blk_path_and_save, remove_setting_by_blk_path, save_settings, save_changed_settings, are_settings_changes_committed, commit_settings_changes } = require("settings")

or::

  from "settings" import *

.. code-block:: sq

  //'settings' exports:
  {
    function get_setting_by_blk_path(arg0): string -> _undocumented_
    function set_setting_by_blk_path(arg0, arg1): string, any_type -> _undocumented_
    function set_setting_by_blk_path_and_save(arg0, arg1): string, any_type -> _undocumented_
    function remove_setting_by_blk_path(arg0, arg1): string, any_type -> _undocumented_
    function save_settings()
    function save_changed_settings(changed_fields): Sqrat::Array -> null
    function are_settings_changes_committed()
    function commit_settings_changes():  -> null
  }
  

.. sq:function:: function get_setting_by_blk_path(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function set_setting_by_blk_path(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function set_setting_by_blk_path_and_save(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:3``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function remove_setting_by_blk_path(arg0, arg1)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: any_type

  ``nparamscheck:2``

  ``typecheck mask: any_type, string, any_type``

.. sq:function:: function save_settings()

  ``nparamscheck:1``

.. sq:function:: function save_changed_settings(changed_fields)

  :param changed_fields:  
  :type changed_fields: Sqrat::Array

  :return: null

.. sq:function:: function are_settings_changes_committed()

.. sq:function:: function commit_settings_changes()

  :return: null

/;
  return tbl;
}

static void fill_changes_name_map(FastNameMap &name_map, const DataBlock &blk, const String &path_so_far)
{
  for (int i = 0; i < blk.blockCount(); i++)
  {
    const DataBlock &childBlk = *blk.getBlock(i);
    fill_changes_name_map(name_map, childBlk, path_so_far + childBlk.getBlockName() + "/");
  }

  for (int i = 0; i < blk.paramCount(); i++)
    name_map.addNameId(path_so_far + blk.getParamName(i));
}

static void settings_explorer_window()
{
  // Ideas:
  // - search filter

  static bool editMode = false, autoApplyEdits = true, needCopySettings = true;
  bool applyEdits = false;

  ImGui::BeginMenuBar();
  if (ImGui::BeginMenu("Actions"))
  {
    if (ImGui::MenuItem("Dump to log"))
    {
      DynamicMemGeneralSaveCB dump(framemem_ptr());
      dgs_get_settings()->saveToTextStream(dump);
      dump.write("\0", 1);
      debug("Settings dump:\n%s", dump.data());
    }
    ImGui::EndMenu();
  }
  if (ImGui::BeginMenu("Modes"))
  {
    ImGui::Checkbox("Edit mode", &editMode);
    ImGui::Checkbox("Auto-apply edits", &autoApplyEdits);
    ImGui::EndMenu();
  }
  if (editMode)
  {
    ImGui::SameLine(ImGui::GetWindowWidth() - (autoApplyEdits ? 70 : 200)); // Align buttons to the right
    if (ImGui::Button(autoApplyEdits ? "Refresh" : "Revert and refresh"))
      needCopySettings = true;
    if (!autoApplyEdits)
      if (ImGui::Button("Apply"))
        applyEdits = true;
  }
  ImGui::EndMenuBar();

  if (editMode)
  {
    static DataBlock settingsCopy;
    static DataBlock settingsChanges;
    if (needCopySettings)
    {
      settingsCopy.setFrom(::dgs_get_settings());
      settingsChanges.clearData();
      needCopySettings = false;
    }
    DataBlock settingsChangesThisFrame(framemem_ptr());
    ImGuiDagor::BlkEdit(&settingsCopy, &settingsChangesThisFrame, true, "dgs_get_settings");
    if (!settingsChangesThisFrame.isEmpty())
    {
      merge_data_block_and_save_order(settingsCopy, settingsChangesThisFrame);
      merge_data_block(settingsChanges, settingsChangesThisFrame);
    }
    if ((applyEdits || autoApplyEdits) && !settingsChanges.isEmpty())
    {
      ::dgs_apply_config_blk(settingsChanges, true, false, true);
      FastNameMap changesNameMap;
      String pathSoFar;
      fill_changes_name_map(changesNameMap, settingsChanges, pathSoFar);
      apply_settings_changes(changesNameMap);
      needCopySettings = true;
    }
  }
  else
  {
    ImGuiDagor::Blk(::dgs_get_settings(), true, "dgs_get_settings");
  }
}

static void gameparams_explorer_window()
{
  ImGui::BeginMenuBar();
  if (ImGui::BeginMenu("Actions"))
  {
    if (ImGui::MenuItem("Dump to log"))
    {
      DynamicMemGeneralSaveCB dump(framemem_ptr());
      dgs_get_game_params()->saveToTextStream(dump);
      dump.write("\0", 1);
      debug("GameParams dump:\n%s", dump.data());
    }
    ImGui::EndMenu();
  }
  ImGui::EndMenuBar();

  ImGuiDagor::Blk(::dgs_get_game_params(), true, "dgs_get_game_params");
}

REGISTER_IMGUI_WINDOW_EX("Settings", "Settings explorer", nullptr, 100, ImGuiWindowFlags_MenuBar, settings_explorer_window);
REGISTER_IMGUI_WINDOW_EX("Settings", "GameParams explorer", nullptr, 100, ImGuiWindowFlags_MenuBar, gameparams_explorer_window);


void dgs_apply_changes_to_config(DataBlock &config_blk, bool need_merge_cmd, const OverrideFilter *override_filter)
{
  DataBlock cmdBlk;
  if (need_merge_cmd)
    dgs_apply_command_line_to_config(&cmdBlk, override_filter);

  // check cmd block first
  const char *presetName = nullptr;
  if (need_merge_cmd)
    presetName = cmdBlk.getBlockByNameEx("graphics")->getStr("consolePreset", nullptr);

  if (presetName == nullptr) // From saved data
    presetName = config_blk.getBlockByNameEx("graphics")->getStr("consolePreset", nullptr);

  if (presetName == nullptr) // From common settings for default
    presetName = ::dgs_get_settings()->getBlockByNameEx("graphics")->getStr("consolePreset", nullptr);

  // first apply graphic preset settings
  if (presetName != nullptr)
    dgs_apply_console_preset_params(config_blk, presetName);

  // second apply cmd changes, overwrite all graphic preset settings if they are exist
  if (need_merge_cmd)
    merge_data_block(config_blk, cmdBlk);
}

void dgs_apply_console_preset_params(DataBlock &config_blk, const char *preset_name)
{
  const char *presetsListBlockName = "consoleGraphicalPresets";
  const DataBlock *presetsBlk = ::dgs_get_settings()->getBlockByName(presetsListBlockName);
  if (!presetsBlk)
  {
    debug("Not exist block '%s' in settings.blk. Cannot read '%s' console preset name.", presetsListBlockName, preset_name);
    return;
  }

  const DataBlock *presetParamsBlk = presetsBlk->getBlockByName(preset_name);
  if (!presetParamsBlk)
  {
    debug("ERROR: Not found console preset '%s' in '%s' block.", preset_name, presetsListBlockName);
    return;
  }

  debug("Apply console preset '%s'.", preset_name);
  merge_data_block(config_blk, *presetParamsBlk);
}


