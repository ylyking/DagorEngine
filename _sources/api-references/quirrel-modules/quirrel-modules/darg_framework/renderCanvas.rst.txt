.. autogenerated

************
renderCanvas
************

  for render canvas

*Source file: prog/gameLibs/daRg/canvasDraw.cpp*


use it to draw in canvas


.. sq:function:: function line(arg0, arg1, arg2)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: array

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  ``nparamscheck:4``

  ``typecheck mask: userdata, array, integer_or_float, any_type``

function comment

.. sq:function:: function line_dashed(arg0, arg1, arg2, arg3, arg4)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: array

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  :param arg4: autodoc from typemask/paramscheck
  :type arg4: any_type

  ``nparamscheck:6``

  ``typecheck mask: userdata, array, integer_or_float, integer_or_float, integer_or_float, any_type``

.. sq:function:: function fill_poly(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: array

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: any_type

  ``nparamscheck:5``

  ``typecheck mask: userdata, array, integer_or_float, any_type, any_type``

.. sq:function:: function fill_inverse_poly(arg0, arg1, arg2, arg3)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: array

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: any_type

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: any_type

  ``nparamscheck:5``

  ``typecheck mask: userdata, array, integer_or_float, any_type, any_type``

.. sq:function:: function ellipse(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  :param arg4: autodoc from typemask/paramscheck
  :type arg4: integer_or_float

  :param arg5: autodoc from typemask/paramscheck
  :type arg5: any_type

  :param arg6: autodoc from typemask/paramscheck
  :type arg6: any_type

  :param arg7: autodoc from typemask/paramscheck
  :type arg7: any_type

  ``nparamscheck:9``

  ``typecheck mask: userdata, integer_or_float, integer_or_float, integer_or_float, integer_or_float, integer_or_float, any_type, any_type, any_type``

.. sq:function:: function sector(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  :param arg4: autodoc from typemask/paramscheck
  :type arg4: integer_or_float

  :param arg5: autodoc from typemask/paramscheck
  :type arg5: integer_or_float

  :param arg6: autodoc from typemask/paramscheck
  :type arg6: integer_or_float

  :param arg7: autodoc from typemask/paramscheck
  :type arg7: any_type

  :param arg8: autodoc from typemask/paramscheck
  :type arg8: any_type

  :param arg9: autodoc from typemask/paramscheck
  :type arg9: any_type

  ``nparamscheck:11``

  ``typecheck mask: userdata, integer_or_float, integer_or_float, integer_or_float, integer_or_float, integer_or_float, integer_or_float, integer_or_float, any_type, any_type, any_type``

.. sq:function:: function rect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: integer_or_float

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: integer_or_float

  :param arg2: autodoc from typemask/paramscheck
  :type arg2: integer_or_float

  :param arg3: autodoc from typemask/paramscheck
  :type arg3: integer_or_float

  :param arg4: autodoc from typemask/paramscheck
  :type arg4: integer_or_float

  :param arg5: autodoc from typemask/paramscheck
  :type arg5: any_type

  :param arg6: autodoc from typemask/paramscheck
  :type arg6: any_type

  :param arg7: autodoc from typemask/paramscheck
  :type arg7: any_type

  ``nparamscheck:9``

  ``typecheck mask: userdata, integer_or_float, integer_or_float, integer_or_float, integer_or_float, integer_or_float, any_type, any_type, any_type``

/;
}

} // namespace darg


