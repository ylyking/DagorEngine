.. autogenerated

**************
dagor.localize
**************

module 'dagor.localize'



*Source file: prog/gameLibs/quirrel/bindQuirrelEx/localization.cpp*

Usage::

  let { loc, getLocTextForLang, processHypenationsCN, processHypenationsJP, doesLocTextExist, getCurrentLanguage, getForceLanguage, setLanguageToSettings, initLocalization } = require("dagor.localize")

or::

  from "dagor.localize" import *

.. code-block:: sq

  //'dagor.localize' exports:
  {
    function loc(arg0, ...): string or null, any_type -> _undocumented_
    function getLocTextForLang(arg0, arg1, ...): string, string or null, any_type -> _undocumented_
    function processHypenationsCN(arg0): string -> _undocumented_
    function processHypenationsJP(arg0): string -> _undocumented_
    function doesLocTextExist(arg0): string -> _undocumented_
    function getCurrentLanguage()
    function getForceLanguage()
    function setLanguageToSettings()
    function initLocalization(arg0, arg1, ...): class_instance, string, any_type -> _undocumented_
  }
  

.. sq:function:: function loc(arg0, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string or null

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, string or null``

.. sq:function:: function getLocTextForLang(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string or null

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-3``

  ``typecheck mask: any_type, string, string or null``

.. sq:function:: function processHypenationsCN(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function processHypenationsJP(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function doesLocTextExist(arg0)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: string

  ``nparamscheck:2``

  ``typecheck mask: any_type, string``

.. sq:function:: function getCurrentLanguage()

.. sq:function:: function getForceLanguage()

.. sq:function:: function setLanguageToSettings()

.. sq:function:: function initLocalization(arg0, arg1, ...)

  :param arg0: autodoc from typemask/paramscheck
  :type arg0: class_instance

  :param arg1: autodoc from typemask/paramscheck
  :type arg1: string

  :param ...: this function accepts unlimited arguments
  :type ...: any_type

  ``nparamscheck:-2``

  ``typecheck mask: any_type, class_instance, string``

/;
  module_mgr->addNativeModule("dagor.localize", exports);
}

} // namespace bindquirrel


