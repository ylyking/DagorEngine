<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaced3d" kind="namespace" language="C++">
    <compoundname>d3d</compoundname>
    <innerclass refid="structd3d_1_1_auto_pipeline_async_compile" prot="public">d3d::AutoPipelineAsyncCompile</innerclass>
    <innerclass refid="classd3d_1_1_auto_pipeline_async_compile_feedback" prot="public">d3d::AutoPipelineAsyncCompileFeedback</innerclass>
    <innerclass refid="structd3d_1_1_gpu_auto_lock" prot="public">d3d::GpuAutoLock</innerclass>
    <innerclass refid="structd3d_1_1_loading_auto_lock" prot="public">d3d::LoadingAutoLock</innerclass>
    <innerclass refid="structd3d_1_1_g_p_u_workload_split" prot="public">d3d::GPUWorkloadSplit</innerclass>
    <innerclass refid="structd3d_1_1_border_color" prot="public">d3d::BorderColor</innerclass>
    <innerclass refid="structd3d_1_1_sampler_info" prot="public">d3d::SamplerInfo</innerclass>
    <innernamespace refid="namespaced3d_1_1buffers">d3d::buffers</innernamespace>
    <innernamespace refid="namespaced3d_1_1drivercode">d3d::drivercode</innernamespace>
    <innernamespace refid="namespaced3d_1_1ps">d3d::ps</innernamespace>
    <innernamespace refid="namespaced3d_1_1shadermodel">d3d::shadermodel</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5" prot="public" static="no" strong="no">
        <type></type>
        <name>@35</name>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5aee46fe06b740cec520589bc8c1df3674" prot="public">
          <name>USAGE_TEXTURE</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a25c88b41a632efca29f5d7b5ab2fac63" prot="public">
          <name>USAGE_DEPTH</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a06f00452a5bc53893dab6d2148755179" prot="public">
          <name>USAGE_RTARGET</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5ada2e5999587a6870d75e7bbca08a223d" prot="public">
          <name>USAGE_AUTOGENMIPS</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5ad8b97022c6bee9e15ce4a9b92f636409" prot="public">
          <name>USAGE_FILTER</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a71196d667d9f45a952d66c7143233451" prot="public">
          <name>USAGE_BLEND</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a12191e605dba380d589f686e04604c51" prot="public">
          <name>USAGE_VERTEXTEXTURE</name>
          <initializer>= 0x40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a93bc5178deae6a120dafd5495beb3841" prot="public">
          <name>USAGE_SRGBREAD</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a05c5e7a35f4c0980df1c16cfa1acada6" prot="public">
          <name>USAGE_SRGBWRITE</name>
          <initializer>= 0x100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a482b0d2d26ee227f66e2df247591d5a2" prot="public">
          <name>USAGE_SAMPLECMP</name>
          <initializer>= 0x200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a4f14ff8bba567519d091fe1e1f664868" prot="public">
          <name>USAGE_PIXREADWRITE</name>
          <initializer>= 0x400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a47f1d54d74aab821bf0888bea91d7a54" prot="public">
          <name>USAGE_TILED</name>
          <initializer>= 0x800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5a15dbc7445976acd87d2acb0ac2dd99a4" prot="public">
          <name>USAGE_UNORDERED</name>
          <initializer>= 0x1000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1ade5363267a90a6114e8f9cf9ccffc8c5aa6457b22023fb792606cf7f28fc03927" prot="public">
          <name>USAGE_UNORDERED_LOAD</name>
          <initializer>= 0x2000</initializer>
          <briefdescription>
<para>Indicates the format supports unordered loads. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="38" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="39" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="dag__driver_8h_1aef7f51e1acea70cf02b53488d52b2645" prot="public" static="no" strong="no">
        <type></type>
        <name>@36</name>
        <enumvalue id="dag__driver_8h_1aef7f51e1acea70cf02b53488d52b2645af3fae37f9d49ae87aafc79ff1cf5cc0f" prot="public">
          <name>CAPFMT_X8R8G8B8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1aef7f51e1acea70cf02b53488d52b2645a44a87bef6604334b7545909721efe26d" prot="public">
          <name>CAPFMT_R8G8B8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1aef7f51e1acea70cf02b53488d52b2645a79a7540ba2824f7c49a461426465b7cd" prot="public">
          <name>CAPFMT_R5G6B5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__driver_8h_1aef7f51e1acea70cf02b53488d52b2645a5bf8b2a041ae2da1df541a9059bce078" prot="public">
          <name>CAPFMT_X1R5G5B5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="57" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="dag__sampler_handle_8h_1aee766f4273f69e0942fff59ab388cfe2" prot="public" static="no" strong="yes">
        <type>uint64_t</type>
        <name>SamplerHandle</name>
        <enumvalue id="dag__sampler_handle_8h_1aee766f4273f69e0942fff59ab388cfe2a4bbb8f967da6d1a610596d7257179c2b" prot="public">
          <name>Invalid</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_samplerHandle.h" line="12" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_samplerHandle.h" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="enum" id="dag__sampler_8h_1aea6114c753431df075c9eae6250f6ebc" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>MipMapMode</name>
        <enumvalue id="dag__sampler_8h_1aea6114c753431df075c9eae6250f6ebca7a1920d61156abc05a60135aefe8bc67" prot="public">
          <name>Default</name>
          <initializer>= TEXMIPMAP_DEFAULT</initializer>
          <briefdescription>
<para>[DEPRECATED] driver default </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1aea6114c753431df075c9eae6250f6ebcab9f5c797ebbf55adccdd8539a65a0241" prot="public">
          <name>Disabled</name>
          <initializer>= TEXMIPMAP_NONE</initializer>
          <briefdescription>
<para>[DEPRECATED] no mipmapping </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1aea6114c753431df075c9eae6250f6ebca2a3cd5946cfd317eb99c3d32e35e2d4c" prot="public">
          <name>Point</name>
          <initializer>= TEXMIPMAP_POINT</initializer>
          <briefdescription>
<para>point mipmapping </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1aea6114c753431df075c9eae6250f6ebca32a843da6ea40ab3b17a3421ccdf671b" prot="public">
          <name>Linear</name>
          <initializer>= TEXMIPMAP_LINEAR</initializer>
          <briefdescription>
<para>linear mipmapping </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MipMapMode enum class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" line="33" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" bodystart="34" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befa" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>FilterMode</name>
        <enumvalue id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befaa7a1920d61156abc05a60135aefe8bc67" prot="public">
          <name>Default</name>
          <initializer>= TEXFILTER_DEFAULT</initializer>
          <briefdescription>
<para>[DEPRECATED] driver default </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befaab9f5c797ebbf55adccdd8539a65a0241" prot="public">
          <name>Disabled</name>
          <initializer>= TEXFILTER_NONE</initializer>
          <briefdescription>
<para>[DEPRECATED] </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befaa2a3cd5946cfd317eb99c3d32e35e2d4c" prot="public">
          <name>Point</name>
          <initializer>= TEXFILTER_POINT</initializer>
          <briefdescription>
<para>point sampling </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befaa32a843da6ea40ab3b17a3421ccdf671b" prot="public">
          <name>Linear</name>
          <initializer>= TEXFILTER_LINEAR</initializer>
          <briefdescription>
<para>linear sampling </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befaa68ef004de6166492c1d668eb8efe09bd" prot="public">
          <name>Best</name>
          <initializer>= TEXFILTER_BEST</initializer>
          <briefdescription>
<para>[DEPRECATED] anisotropic and similar, if available </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1a14111ae4f0e117b81c3adb833ec2befaa7eece51cf3938103677db7a5051ef8f5" prot="public">
          <name>Compare</name>
          <initializer>= TEXFILTER_COMPARE</initializer>
          <briefdescription>
<para>point comparasion for using in pcf </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FilterMode enum class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" line="44" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="dag__sampler_8h_1ab9b8bd4f130a7805eef77eb4d7c71caa" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>AddressMode</name>
        <enumvalue id="dag__sampler_8h_1ab9b8bd4f130a7805eef77eb4d7c71caaaa212b19ef5f2fb30acf92e6cbccc1f2d" prot="public">
          <name>Wrap</name>
          <initializer>= TEXADDR_WRAP</initializer>
          <briefdescription>
<para>Repeats the texture when texture coordinates are outside [0, 1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1ab9b8bd4f130a7805eef77eb4d7c71caaa2403def5083f02105e7802b3b315681e" prot="public">
          <name>Mirror</name>
          <initializer>= TEXADDR_MIRROR</initializer>
          <briefdescription>
<para>Mirrors the texture when texture coordinates are outside [0, 1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1ab9b8bd4f130a7805eef77eb4d7c71caaa08825280e3f8137556325061ba67ff8c" prot="public">
          <name>Clamp</name>
          <initializer>= TEXADDR_CLAMP</initializer>
          <briefdescription>
<para>Clamps texture coordinates to [0, 1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1ab9b8bd4f130a7805eef77eb4d7c71caaa070554647306343cbea29ebfdd278ba8" prot="public">
          <name>Border</name>
          <initializer>= TEXADDR_BORDER</initializer>
          <briefdescription>
<para>Uses the border color when texture coordinates are outside [0, 1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dag__sampler_8h_1ab9b8bd4f130a7805eef77eb4d7c71caaabbfe58735042c726d2d04562ea4e265a" prot="public">
          <name>MirrorOnce</name>
          <initializer>= TEXADDR_MIRRORONCE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Similar to Mirror and Clamp. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full MirrorOnce texture-addressing mode is not necessary, but the data is symmetrical around the one axis. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AddressMode enum class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" line="57" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" bodystart="58" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dag__query_8h_1ac319d128a742223a1955303d059922a9" prot="public" static="no">
        <type>D3dEventQuery</type>
        <definition>typedef D3dEventQuery d3d::EventQuery</definition>
        <argsstring></argsstring>
        <name>EventQuery</name>
        <briefdescription>
<para>Opaque type, a pointer to which represents an event query. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" line="15" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dag__shader_model_version_8h_1af3dabcf7b6af7fb8650b43bfa15c5df2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_constant" kindref="compound">shadermodel::VersionConstant</ref>&lt; 0, 0 &gt;</type>
        <definition>constexpr shadermodel::VersionConstant&lt;0, 0&gt; d3d::smNone</definition>
        <argsstring></argsstring>
        <name>smNone</name>
        <briefdescription>
<para>Shader model constant that represents no shader model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="732" column="47" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1abcaa3d49db529f5744533d8ce82355cf" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_constant" kindref="compound">shadermodel::VersionConstant</ref>&lt; 4, 0 &gt;</type>
        <definition>constexpr shadermodel::VersionConstant&lt;4, 0&gt; d3d::sm40</definition>
        <argsstring></argsstring>
        <name>sm40</name>
        <briefdescription>
<para>Version constant of the 4.0 shader model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="734" column="47" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1a3985e26c553749374d811c92e99170c2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_constant" kindref="compound">shadermodel::VersionConstant</ref>&lt; 4, 1 &gt;</type>
        <definition>constexpr shadermodel::VersionConstant&lt;4, 1&gt; d3d::sm41</definition>
        <argsstring></argsstring>
        <name>sm41</name>
        <briefdescription>
<para>Version constant of the 4.1 shader model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="736" column="47" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1a5ce7eb525cc184abc988dc2bc2ff55be" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_constant" kindref="compound">shadermodel::VersionConstant</ref>&lt; 5, 0 &gt;</type>
        <definition>constexpr shadermodel::VersionConstant&lt;5, 0&gt; d3d::sm50</definition>
        <argsstring></argsstring>
        <name>sm50</name>
        <briefdescription>
<para>Version constant of the 5.0 shader model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="738" column="47" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1a8d9c7612bd6bdf1692da087195a99e4c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_constant" kindref="compound">shadermodel::VersionConstant</ref>&lt; 6, 0 &gt;</type>
        <definition>constexpr shadermodel::VersionConstant&lt;6, 0&gt; d3d::sm60</definition>
        <argsstring></argsstring>
        <name>sm60</name>
        <briefdescription>
<para>Version constant of the 6.0 shader model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="740" column="47" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1a4c785ac8be0704cf305c4b2bdb68d2d1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_constant" kindref="compound">shadermodel::VersionConstant</ref>&lt; 6, 6 &gt;</type>
        <definition>constexpr shadermodel::VersionConstant&lt;6, 6&gt; d3d::sm66</definition>
        <argsstring></argsstring>
        <name>sm66</name>
        <briefdescription>
<para>Version constant of the 6.6 shader model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="742" column="47" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1ac45df8f15949fed05b98d91754d81412" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_any_version" kindref="compound">shadermodel::AnyVersion</ref></type>
        <definition>constexpr shadermodel::AnyVersion d3d::smAny</definition>
        <argsstring></argsstring>
        <name>smAny</name>
        <briefdescription>
<para>Version constant that will match true to any shader model version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="744" column="42" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1aec52786110f4e8860f140c90c47a7813" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto d3d::smMax</definition>
        <argsstring></argsstring>
        <name>smMax</name>
        <initializer>= max(<ref refid="namespaced3d_1_1shadermodel_1af7c6b8e9847f1caff846139429a3b0cc" kindref="member">shadermodel::AllVersionsList</ref>{})</initializer>
        <briefdescription>
<para>Latest supported shader model version of the list defined by <ref refid="namespaced3d_1_1shadermodel_1af7c6b8e9847f1caff846139429a3b0cc" kindref="member">shadermodel::AllVersionsList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="752" column="23" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1a54a5e87c28440117f7573993dffaa8e3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto d3d::smMin</definition>
        <argsstring></argsstring>
        <name>smMin</name>
        <initializer>= min(<ref refid="namespaced3d_1_1shadermodel_1af7c6b8e9847f1caff846139429a3b0cc" kindref="member">shadermodel::AllVersionsList</ref>{})</initializer>
        <briefdescription>
<para>Earliest supported shader model version of the list defined by <ref refid="namespaced3d_1_1shadermodel_1af7c6b8e9847f1caff846139429a3b0cc" kindref="member">shadermodel::AllVersionsList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="754" column="23" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__shader_model_version_8h_1adef9e70546552aedf9e6f9a6065641fd" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1shadermodel_1_1_version_range" kindref="compound">shadermodel::VersionRange</ref>&lt; <ref refid="namespaced3d_1_1shadermodel_1af7c6b8e9847f1caff846139429a3b0cc" kindref="member">shadermodel::AllVersionsList</ref> &gt;</type>
        <definition>constexpr shadermodel::VersionRange&lt;shadermodel::AllVersionsList&gt; d3d::smAll</definition>
        <argsstring></argsstring>
        <name>smAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This value is a version range over all listed versions, to extend the list, alter the type <ref refid="namespaced3d_1_1shadermodel_1af7c6b8e9847f1caff846139429a3b0cc" kindref="member">d3d::shadermodel::AllVersionsList</ref>. This value supports begin / end and can be used as a range for range based for loops. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="757" column="44" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a0b93a22ed9f589b928958390fd326bc7" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::xboxOne</definition>
        <argsstring></argsstring>
        <name>xboxOne</name>
        <briefdescription>
<para>Matches to true when the current platform is Xbox One and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1079" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a94c41f0233d3ce3f626d1bc55e12bc56" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::scarlett</definition>
        <argsstring></argsstring>
        <name>scarlett</name>
        <briefdescription>
<para>Matches to true when the current platform is Xbox Series X / S and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1081" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a4d2bee7bc5b0382c948e80f1c59d6788" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::iOS</definition>
        <argsstring></argsstring>
        <name>iOS</name>
        <briefdescription>
<para>Matches to true when the current platform is iOS and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1083" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a6e593f2820d5d6f5ce64edd55e72cadf" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::tvOS</definition>
        <argsstring></argsstring>
        <name>tvOS</name>
        <briefdescription>
<para>Matches to true when the current platform is tvOS and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1085" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a87e64d0876126abd4c4c87e72e49f74a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::nintendoSwitch</definition>
        <argsstring></argsstring>
        <name>nintendoSwitch</name>
        <briefdescription>
<para>Matches to true when the current platform is Nintendo Switch and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1087" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a25ad7fc8e2a77ae96994e70b276a9046" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::android</definition>
        <argsstring></argsstring>
        <name>android</name>
        <briefdescription>
<para>Matches to true when the current platform is Android and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1089" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a330e3ed79c885f83aee7a210c7f6bfe4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::macOSX</definition>
        <argsstring></argsstring>
        <name>macOSX</name>
        <briefdescription>
<para>Matches to true when the current platform is macOS and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1091" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a7bb5971f026754eed02b077d51d388e4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::linux</definition>
        <argsstring></argsstring>
        <name>linux</name>
        <briefdescription>
<para>Matches to true when the current platform is Linux and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1093" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a44390d618141249cc76aaf7c7ff51aab" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::windows</definition>
        <argsstring></argsstring>
        <name>windows</name>
        <briefdescription>
<para>Matches to true when the current platform is Windows and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1095" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a69450882aa2d6edf9c3365388e840fb3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::dx11</definition>
        <argsstring></argsstring>
        <name>dx11</name>
        <briefdescription>
<para>Matches to true when the current driver is DirectX 11 and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1097" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a379fdccd89a679d3d3f60aa5adccff46" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::dx12</definition>
        <argsstring></argsstring>
        <name>dx12</name>
        <briefdescription>
<para>Matches to true when the current driver is DirectX 12 and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1099" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a0c4ec8811b6cb2415f0d970d1ad3b09f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::vulkan</definition>
        <argsstring></argsstring>
        <name>vulkan</name>
        <briefdescription>
<para>Matches to true when the current driver is Vulkan and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1101" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a11c448fac4890d7a7e6fdde8dc68e9b9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::ps4</definition>
        <argsstring></argsstring>
        <name>ps4</name>
        <briefdescription>
<para>Matches to true when the current platform / driver is PlayStation 4 and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1103" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a2e85cfa526d03301bb509cb03d361400" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::ps5</definition>
        <argsstring></argsstring>
        <name>ps5</name>
        <briefdescription>
<para>Matches to true when the current platform / driver is PlayStation 5 and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1105" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a68ae646b3ed40f473cf8b441714bdab7" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::metal</definition>
        <argsstring></argsstring>
        <name>metal</name>
        <briefdescription>
<para>Matches to true when the current driver is Metal and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1107" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a4a5ce3875969d20bc813f50d91bbd1eb" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::null</definition>
        <argsstring></argsstring>
        <name>null</name>
        <briefdescription>
<para>Matches to true when the current driver is null and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1109" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1ae96b52312925b3c8950e6242e7bce42d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_unsupported" kindref="compound">drivercode::matcher::Unsupported</ref></type>
        <definition>constexpr drivercode::matcher::Unsupported d3d::stub</definition>
        <argsstring></argsstring>
        <name>stub</name>
        <briefdescription>
<para>Matches to true when the current driver is stub and otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1111" column="51" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1aeb11dc2eac7c20cb9f1508db9c55115c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto d3d::anyXbox</definition>
        <argsstring></argsstring>
        <name>anyXbox</name>
        <initializer>= xboxOne || scarlett</initializer>
        <briefdescription>
<para>Matches true when either Xbox One or Xbox Series X / S matches true, otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1134" column="23" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1ac8fd4c4df938b77c6c71c408671a7628" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto d3d::anyPS</definition>
        <argsstring></argsstring>
        <name>anyPS</name>
        <initializer>= ps4 || ps5</initializer>
        <briefdescription>
<para>Matches true when either PlayStation 4 or PlayStation 5 matches true, otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1136" column="23" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a56951da138e4fecc90f8ba261a7ae5f2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto d3d::anyPC</definition>
        <argsstring></argsstring>
        <name>anyPC</name>
        <initializer>= macOSX || linux || windows</initializer>
        <briefdescription>
<para>Matches true when either macOS, Linux or Windows matches true, otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1138" column="23" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a1ca178fef1dacb2574146e67b7ec3a1a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_undefined" kindref="compound">d3d::drivercode::matcher::Undefined</ref></type>
        <definition>constexpr d3d::drivercode::matcher::Undefined d3d::undefined</definition>
        <argsstring></argsstring>
        <name>undefined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches true when no driver could be matched, otherwise false. <simplesect kind="note"><para>On platforms with a fixed driver, this will always match false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1141" column="54" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a60a1c3f00ff80b058e1df3ade774f3e3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_any" kindref="compound">drivercode::matcher::Any</ref></type>
        <definition>constexpr drivercode::matcher::Any d3d::any</definition>
        <argsstring></argsstring>
        <name>any</name>
        <briefdescription>
<para>Matches always true, has special meaning for some uses, like map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1143" column="43" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a819997d0f9dad1eb54b88ba123648d0a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto d3d::apple</definition>
        <argsstring></argsstring>
        <name>apple</name>
        <initializer>= iOS || tvOS || macOSX</initializer>
        <briefdescription>
<para>Matches true when either iOS, tvOS or macOS matches true, otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1145" column="23" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1a1bb7d0366e017244035538499e5e22a6" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_const" kindref="compound">drivercode::matcher::Const</ref>&lt; true &gt;</type>
        <definition>constexpr drivercode::matcher::Const&lt;true&gt; d3d::bit32</definition>
        <argsstring></argsstring>
        <name>bit32</name>
        <briefdescription>
<para>Matches true when the build of the project targets a 32 bit architecture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1151" column="45" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_code_8h_1ab468bfc507917cdddd323f11030fe6e0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structd3d_1_1drivercode_1_1matcher_1_1_const" kindref="compound">drivercode::matcher::Const</ref>&lt; false &gt;</type>
        <definition>constexpr drivercode::matcher::Const&lt;false&gt; d3d::bit64</definition>
        <argsstring></argsstring>
        <name>bit64</name>
        <briefdescription>
<para>Matches true when the build of the project targets a 64 bit architecture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" line="1153" column="45" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driverCode.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__driver_8h_1a6e18a07fbff9c75f3a4861c01491169b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int d3d::RENDER_TO_WHOLE_ARRAY</definition>
        <argsstring></argsstring>
        <name>RENDER_TO_WHOLE_ARRAY</name>
        <initializer>= 1023</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="67" column="22" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dag__sampler_handle_8h_1ac4554f9e2d21dfb2dade16cb321bb65d" prot="public" static="no" mutable="no">
        <type>const SamplerHandle</type>
        <definition>const SamplerHandle d3d::INVALID_SAMPLER_HANDLE</definition>
        <argsstring></argsstring>
        <name>INVALID_SAMPLER_HANDLE</name>
        <initializer>= SamplerHandle::Invalid</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_samplerHandle.h" line="16" column="28" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_samplerHandle.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dag__tiled_resource_8h_1a0d96d8e8d744c9519425a6a7f5014fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::map_tile_to_resource</definition>
        <argsstring>(BaseTexture *tex, ResourceHeap *heap, const TileMapping *mapping, size_t mapping_count)</argsstring>
        <name>map_tile_to_resource</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>ResourceHeap *</type>
          <declname>heap</declname>
        </param>
        <param>
          <type>const <ref refid="struct_tile_mapping" kindref="compound">TileMapping</ref> *</type>
          <declname>mapping</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mapping_count</declname>
        </param>
        <briefdescription>
<para>Maps a memory area of the heap to the specified xyz location of the texture. </para>
        </briefdescription>
        <detaileddescription>
<para>Use heap == nullptr to remove the link between a tile and the mapped heap portion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>The heap to map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapping</parametername>
</parameternamelist>
<parameterdescription>
<para>The mapping to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapping_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of mappings in the mapping array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_tiledResource.h" line="66" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_tiledResource.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__tiled_resource_8h_1a0eeb4e238ef34b41ad53263f660f5c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_texture_tiling_info" kindref="compound">TextureTilingInfo</ref></type>
        <definition>TextureTilingInfo d3d::get_texture_tiling_info</definition>
        <argsstring>(BaseTexture *tex, size_t subresource)</argsstring>
        <name>get_texture_tiling_info</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>subresource</declname>
        </param>
        <briefdescription>
<para>Retrieves the tiling information of a texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subresource</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the subresource. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tiling information of the texture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_tiledResource.h" line="75" column="19" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_tiledResource.h" declline="75" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="dag__query_8h_1adb392f93ee21b5a48457b59fdf1234b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EventQuery *</type>
        <definition>EventQuery* d3d::create_event_query</definition>
        <argsstring>()</argsstring>
        <name>create_event_query</name>
        <briefdescription>
<para>Creates a new event query. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the created event query, or nullptr if not supported or failed (device reset e.g.). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" line="21" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" declline="21" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__query_8h_1a7d8e971add94f9214e9f6708ade5173d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::release_event_query</definition>
        <argsstring>(EventQuery *query)</argsstring>
        <name>release_event_query</name>
        <param>
          <type>EventQuery *</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Releases the specified event query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The event query to release. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" line="27" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__query_8h_1a33b36863ba4ea264eb4e10807344e988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::issue_event_query</definition>
        <argsstring>(EventQuery *query)</argsstring>
        <name>issue_event_query</name>
        <param>
          <type>EventQuery *</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Issues the specified event query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The event query to issue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the query was successfully issued, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" line="34" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__query_8h_1aebaa987efa05864c349f52f7167cead6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::get_event_query_status</definition>
        <argsstring>(EventQuery *query, bool force_flush)</argsstring>
        <name>get_event_query_status</name>
        <param>
          <type>EventQuery *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force_flush</declname>
        </param>
        <briefdescription>
<para>Gets the status of the specified event query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The event query to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force_flush</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to force a flush before checking the status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if the query is issued but not yet signaled, true otherwise (signaled, not issued, or bad query). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" line="42" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_query.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a5e8f37114e1546cb5e49982e9624daef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer* d3d::create_vb</definition>
        <argsstring>(int size_bytes, int flags, const char *name=&quot;&quot;)</argsstring>
        <name>create_vb</name>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Creates a vertex buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a vertex buffer with the specified size and flags.</para>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Make the name parameter mandatory.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the vertex buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the vertex buffer (temporarily optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created vertex buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="28" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="28" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a6125304ba04dc751961455f5a28e9667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer* d3d::create_ib</definition>
        <argsstring>(int size_bytes, int flags, const char *stat_name=&quot;ib&quot;)</argsstring>
        <name>create_ib</name>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>&quot;ib&quot;</defval>
        </param>
        <briefdescription>
<para>Creates an index buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates an index buffer with the specified size and flags.</para>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Make the name parameter mandatory.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the index buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the index buffer (temporarily optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created index buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="42" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="42" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a2878cf32d25d141f658cc062f962e3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setvsrc_ex</definition>
        <argsstring>(int stream, Sbuffer *vb, int offset, int stride_bytes)</argsstring>
        <name>setvsrc_ex</name>
        <param>
          <type>int</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>vb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_bytes</declname>
        </param>
        <briefdescription>
<para>Sets the vertex buffer as a stream source. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex buffer as a stream source for the specified stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the vertex buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes from the start of the vertex buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride in bytes between vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vertex stream source was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="55" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a660bc98865794cea404eda3bb6bbc25e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setvsrc</definition>
        <argsstring>(int stream, Sbuffer *vb, int stride_bytes)</argsstring>
        <name>setvsrc</name>
        <param>
          <type>int</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>vb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_bytes</declname>
        </param>
        <briefdescription>
<para>Sets the vertex buffer as a stream source. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the vertex buffer as a stream source for the specified stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the vertex buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride in bytes between vertices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vertex stream source was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="67" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1ab4b7355eb67812759ebadfd7cb2836f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setind</definition>
        <argsstring>(Sbuffer *ib)</argsstring>
        <name>setind</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>ib</declname>
        </param>
        <briefdescription>
<para>Sets the index buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the index buffer for rendering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ib</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the index buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the indices were set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="77" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a64de8a685d98bfcf5ab180aaf92eccab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VDECL</type>
        <definition>VDECL d3d::create_vdecl</definition>
        <argsstring>(VSDTYPE *vsd)</argsstring>
        <name>create_vdecl</name>
        <param>
          <type>VSDTYPE *</type>
          <declname>vsd</declname>
        </param>
        <briefdescription>
<para>Creates a DX8-style vertex declaration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a DX8-style vertex declaration based on the specified vertex shader declaration.</para>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>Do we really need to support DX8-style vertex declarations? Maybe it&apos;s time to look for a more modern solution.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vsd</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex shader declaration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created vertex declaration, or BAD_VDECL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="89" column="7" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="89" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a8b1ddd7c2d30e952ce9de7c92512a1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::delete_vdecl</definition>
        <argsstring>(VDECL vdecl)</argsstring>
        <name>delete_vdecl</name>
        <param>
          <type>VDECL</type>
          <declname>vdecl</declname>
        </param>
        <briefdescription>
<para>Deletes a vertex declaration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function deletes a vertex declaration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vdecl</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex declaration to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="98" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="98" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__vertex_index_buffer_8h_1a8cd95d3a91b01e1a9b67860e0b9004fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setvdecl</definition>
        <argsstring>(VDECL vdecl)</argsstring>
        <name>setvdecl</name>
        <param>
          <type>VDECL</type>
          <declname>vdecl</declname>
        </param>
        <briefdescription>
<para>Sets the current vertex declaration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the current vertex declaration for rendering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vdecl</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex declaration to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the vertex declaration was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" line="108" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_vertexIndexBuffer.h" declline="108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1aff5a0ee30da880ed6ab05e7f9ec288df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_const</definition>
        <argsstring>(unsigned stage, unsigned reg_base, const void *data, unsigned num_regs)</argsstring>
        <name>set_const</name>
        <param>
          <type>unsigned</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>reg_base</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Sets shader constants for the specified stage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage (STAGE_VS, STAGE_PS, STAGE_CS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base register index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. The size must be a multiple of sizeof(float4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers (float4) to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constants were set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>These constants will be ignored, if a constant buffer is explicitly bound to slot 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="26" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1ad49fe7918ce4e1b80d5f3327f4f3c533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_vs_const</definition>
        <argsstring>(unsigned reg_base, const void *data, unsigned num_regs)</argsstring>
        <name>set_vs_const</name>
        <param>
          <type>unsigned</type>
          <declname>reg_base</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Sets vertex shader constants. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base register index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. The size must be a multiple of sizeof(float4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers (float4) to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constants were set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>These constants will be ignored, if a constant buffer is explicitly bound to slot 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="37" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1a940b10dfc8503a371f3ce3cf4669169b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_ps_const</definition>
        <argsstring>(unsigned reg_base, const void *data, unsigned num_regs)</argsstring>
        <name>set_ps_const</name>
        <param>
          <type>unsigned</type>
          <declname>reg_base</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Sets pixel shader constants. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base register index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. The size must be a multiple of sizeof(float4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers (float4) to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constants were set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>These constants will be ignored, if a constant buffer is explicitly bound to slot 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="51" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1a151ca8096fad5a339b3713ffd2a6b242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_cs_const</definition>
        <argsstring>(unsigned reg_base, const void *data, unsigned num_regs)</argsstring>
        <name>set_cs_const</name>
        <param>
          <type>unsigned</type>
          <declname>reg_base</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Sets compute shader constants. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base register index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. The size must be a multiple of sizeof(float4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers (float4) to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constants were set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>These constants will be ignored, if a constant buffer is explicitly bound to slot 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="65" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1a61b3c7266463dd89a69f66220a483e47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_vs_const1</definition>
        <argsstring>(unsigned reg, float v0, float v1, float v2, float v3)</argsstring>
        <name>set_vs_const1</name>
        <param>
          <type>unsigned</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Sets a single vertex shader constant register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the first component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the second component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the third component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v3</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the fourth component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constant was set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This constant will be ignored, if a constant buffer is explicitly bound to slot 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="81" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1adb026c9307a991b81fd35cc6b87d2899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_ps_const1</definition>
        <argsstring>(unsigned reg, float v0, float v1, float v2, float v3)</argsstring>
        <name>set_ps_const1</name>
        <param>
          <type>unsigned</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
<para>Sets a single pixel shader constant register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the first component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the second component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the third component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v3</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the fourth component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constant was set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This constant will be ignored, if a constant buffer is explicitly bound to slot 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="98" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1a8ba8d82aa75260edca7b115799ee448a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_immediate_const</definition>
        <argsstring>(unsigned stage, const uint32_t *data, unsigned num_words)</argsstring>
        <name>set_immediate_const</name>
        <param>
          <type>unsigned</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_words</declname>
        </param>
        <briefdescription>
<para>Sets immediate constants for the specified stage. </para>
        </briefdescription>
        <detaileddescription>
<para>Immediate constants are supposed to be very cheap to set dwords. It is guaranteed to support up to 4 dwords on each stage. Use as little as possible, ideally one or two (or none). On XB1(PS4), it is implemented as user regs (C|P|V)SSetShaderUserData. On DX11, it is implemented as constant buffers. On VK/DX12, it should be implemented as descriptor/push constants buffers. Calling with data = nullptr || num_words == 0 is benign and currently works as &quot;stop using immediate&quot; (probably have to be replaced with shader system).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage (STAGE_VS, STAGE_PS, STAGE_CS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_words</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constants were set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="122" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" declline="122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1abc19a5aac5646eca18c9c4823c560f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_const_buffer</definition>
        <argsstring>(unsigned stage, unsigned slot, const float *data, unsigned num_regs)</argsstring>
        <name>set_const_buffer</name>
        <param>
          <type>unsigned</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Sets a constant buffer for the specified stage. PS4 specific. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant buffers are valid until driver acquire call or end of frame. To unbind, use set_const_buffer(stage, 0, nullptr).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage (STAGE_VS, STAGE_PS, STAGE_CS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. The size must be a multiple of sizeof(float4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers (float4) to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constant buffer was set successfully, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>When slot is 0, and data is not nullptr, it will also override any constants set via set_const and related calls. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="137" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1a7faa22a3eee807e8574873fdcc6b3fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_const_buffer</definition>
        <argsstring>(unsigned stage, unsigned slot, Sbuffer *buffer, uint32_t consts_offset=0, uint32_t consts_size=0)</argsstring>
        <name>set_const_buffer</name>
        <param>
          <type>unsigned</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>consts_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>consts_size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets a constant buffer for the specified stage using a buffer object. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant buffers are valid until driver acquire call or end of frame. To unbind, use set_const_buffer(stage, 0, nullptr).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage (STAGE_VS, STAGE_PS, STAGE_CS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer object. Must be created with d3d::buffers::create_persistent_cb or d3d::buffers::create_one_frame_cb. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consts_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the constants in the buffer. (Not used) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consts_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the constants in the buffer. (Not used) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>consts_offset and consts_size are not used. Remove them? </para>
</xrefdescription></xrefsect><simplesect kind="return"><para>True if the constant buffer was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="154" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1a2af71db90e47ee8917fa9e326db28006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::set_vs_constbuffer_size</definition>
        <argsstring>(int required_size)</argsstring>
        <name>set_vs_constbuffer_size</name>
        <param>
          <type>int</type>
          <declname>required_size</declname>
        </param>
        <briefdescription>
<para>Sets the size of the vertex shader constant buffer that can be filled with set_const call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>required_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The required size of the constant buffer. If 0, the default size is set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual size of the constant buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="162" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" declline="162" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1ae177d5503a48a32221db1748c809a900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::set_cs_constbuffer_size</definition>
        <argsstring>(int required_size)</argsstring>
        <name>set_cs_constbuffer_size</name>
        <param>
          <type>int</type>
          <declname>required_size</declname>
        </param>
        <briefdescription>
<para>Sets the size of the compute shader constant buffer that can be filled with set_const call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>required_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The required size of the constant buffer. If 0, the default size is set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual size of the constant buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="170" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" declline="170" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1adeb50aaeacc0a1cb233005854ab5fbe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_cb0_data</definition>
        <argsstring>(unsigned stage, const float *data, unsigned num_regs)</argsstring>
        <name>set_cb0_data</name>
        <param>
          <type>unsigned</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Sets a constant buffer at slot 0 for the specified stage. Uses the fastest method available on the platform. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant buffers are valid until driver acquire call or end of frame. To unbind, use release_cb0_data(stage).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage (STAGE_VS, STAGE_PS, STAGE_CS). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be set. The size must be a multiple of sizeof(float4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of registers (float4) to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the constants were set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="183" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="183" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_constants_8h_1aeeea3fce4e42995a125567134463690c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::release_cb0_data</definition>
        <argsstring>(unsigned stage)</argsstring>
        <name>release_cb0_data</name>
        <param>
          <type>unsigned</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Releases the constant buffer at slot 0, which should have been previously set by set_cb0_data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage (STAGE_VS, STAGE_PS, STAGE_CS). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" line="203" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderConstants.h" bodystart="203" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="dag__commands_8h_1ab2751f13a6ac7fc35f59a545e8ab81d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::driver_command</definition>
        <argsstring>(Drv3dCommand command, void *par1=nullptr, void *par2=nullptr, void *par3=nullptr)</argsstring>
        <name>driver_command</name>
        <param>
          <type>Drv3dCommand</type>
          <declname>command</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>par1</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>par2</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>par3</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>send specific command to driver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_commands.h" line="508" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_commands.h" declline="508" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__buffers_8h_1a1ab1f32e68a6f76ba3257e79387fbf58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer* d3d::create_sbuffer</definition>
        <argsstring>(int struct_size, int elements, unsigned flags, unsigned texfmt, const char *name)</argsstring>
        <name>create_sbuffer</name>
        <param>
          <type>int</type>
          <declname>struct_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>texfmt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a buffer with the specified parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer can be used for various purposes, such as constant buffers, structured buffers, byte address buffers, and more. It is an uber method, and not all combinations of parameters are valid. Use d3d::buffers namespace for more specific buffer creation methods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of each structure in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional flags for the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texfmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture format for tBuffers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_buffers.h" line="247" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_buffers.h" declline="247" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__buffers_8h_1a108d8b24d96675f8f4edb6bebcfdac8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_buffer</definition>
        <argsstring>(unsigned shader_stage, unsigned slot, Sbuffer *buffer)</argsstring>
        <name>set_buffer</name>
        <param>
          <type>unsigned</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Sets an <ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> for a specific shader stage and slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage to set the buffer for. One of STAGE_ values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot to bind the buffer to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the buffer was successfully set, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_buffers.h" line="257" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_buffers.h" declline="257" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__buffers_8h_1add60a36c80b8e756c8a6f8b0eb266a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_rwbuffer</definition>
        <argsstring>(unsigned shader_stage, unsigned slot, Sbuffer *buffer)</argsstring>
        <name>set_rwbuffer</name>
        <param>
          <type>unsigned</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Sets a read-write <ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> for a specific shader stage and slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage to set the buffer for. One of STAGE_ values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot to bind the buffer to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the buffer was successfully set, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_buffers.h" line="267" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_buffers.h" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_8h_1ae7c485b1584e68f0ac6c50c14144bd31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::reserve_res_entries</definition>
        <argsstring>(bool strict_max, int max_tex, int max_vs, int max_ps, int max_vdecl, int max_vb, int max_ib, int max_stblk)</argsstring>
        <name>reserve_res_entries</name>
        <param>
          <type>bool</type>
          <declname>strict_max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_tex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_vs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_ps</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_vdecl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_vb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_ib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_stblk</declname>
        </param>
        <briefdescription>
<para>reserves resource entries using max count values, optionally disabling exceeding count limit </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_res.h" line="10" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_res.h" declline="10" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_8h_1a79955d52d0a863771894649c5e72708a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_max_used_res_entries</definition>
        <argsstring>(int &amp;max_tex, int &amp;max_vs, int &amp;max_ps, int &amp;max_vdecl, int &amp;max_vb, int &amp;max_ib, int &amp;max_stblk)</argsstring>
        <name>get_max_used_res_entries</name>
        <param>
          <type>int &amp;</type>
          <declname>max_tex</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_vs</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_ps</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_vdecl</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_vb</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_ib</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_stblk</declname>
        </param>
        <briefdescription>
<para>returns maximum resource entries count values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_res.h" line="13" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_res.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_8h_1aa9be1f8e4dcf3ef97b8c282336f67ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_cur_used_res_entries</definition>
        <argsstring>(int &amp;max_tex, int &amp;max_vs, int &amp;max_ps, int &amp;max_vdecl, int &amp;max_vb, int &amp;max_ib, int &amp;max_stblk)</argsstring>
        <name>get_cur_used_res_entries</name>
        <param>
          <type>int &amp;</type>
          <declname>max_tex</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_vs</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_ps</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_vdecl</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_vb</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_ib</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_stblk</declname>
        </param>
        <briefdescription>
<para>returns current resource entries count values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_res.h" line="16" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_res.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_library_8h_1a29c323d9ca05f4566ac8f0839e2c7354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ShaderLibrary</type>
        <definition>ShaderLibrary d3d::create_shader_library</definition>
        <argsstring>(const ShaderLibraryCreateInfo &amp;slci)</argsstring>
        <name>create_shader_library</name>
        <param>
          <type>const <ref refid="struct_shader_library_create_info" kindref="compound">ShaderLibraryCreateInfo</ref> &amp;</type>
          <declname>slci</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new shader library. The creation of a shader library may be a time consuming process (several hundred milliseconds) as device drivers compile the generic shader IL into device specific machine code, this function will block until this process is completed. Returns either a new ShaderLibrary object or InvalidShaderLibrary to indicate there was and error. In case of an error, driver should log the cause for the error into the error log. In case of a device reset, the shader library becomes unusable and has to be destroyed and recreated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderLibrary.h" line="17" column="15" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderLibrary.h" declline="17" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_library_8h_1a916dd9957a9c83ebffd0bf3f8a3ae675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::destroy_shader_library</definition>
        <argsstring>(ShaderLibrary library)</argsstring>
        <name>destroy_shader_library</name>
        <param>
          <type>ShaderLibrary</type>
          <declname>library</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a shader library. A shader library can be destroyed when other object reference shaders of the shader library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderLibrary.h" line="20" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderLibrary.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1ae01d8056d43de5aff0492c02f80817d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t d3d::register_bindless_sampler</definition>
        <argsstring>(BaseTexture *texture)</argsstring>
        <name>register_bindless_sampler</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
<para>Registers the sampler portion of the given texture into the global bindless sampler table. </para>
        </briefdescription>
        <detaileddescription>
<para>Textures with identical samplers may yield identical return values. Default sampler (mip linear, filter linear, address wrap, anisotropic = 1, mip bias = 0, transparent black border) is available at zero slot by default.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="class_base_texture" kindref="compound">BaseTexture</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index in the global sampler table representing this sampler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="24" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="24" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1a9673f22ab59c32eb0ac6c9007f867ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t d3d::register_bindless_sampler</definition>
        <argsstring>(SamplerHandle sampler)</argsstring>
        <name>register_bindless_sampler</name>
        <param>
          <type>SamplerHandle</type>
          <declname>sampler</declname>
        </param>
        <briefdescription>
<para>Registers a sampler into the global bindless sampler table. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiple register calls with the same sampler may yield identical return values. Default sampler (mip linear, filter linear, address wrap, anisotropic = 1, mip bias = 0, transparent black border) is available at zero slot by default.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampler</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampler that should be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index in the global sampler table representing this sampler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="36" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1a86cd7fd11a25cba9e2666f76201b4854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t d3d::allocate_bindless_resource_range</definition>
        <argsstring>(uint32_t resource_type, uint32_t count)</argsstring>
        <name>allocate_bindless_resource_range</name>
        <param>
          <type>uint32_t</type>
          <declname>resource_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Allocates a persistent bindless slot range of the given &apos;resource_type&apos; resource type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of resource to allocate the slot range for. Must be one of RES3D_ enum values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of slots to allocate. Must be larger than 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first slot index into the bindless heap of the requested range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="45" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1a4d1d6e52b2fc6d053bbb894e35463e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t d3d::resize_bindless_resource_range</definition>
        <argsstring>(uint32_t resource_type, uint32_t index, uint32_t current_count, uint32_t new_count)</argsstring>
        <name>resize_bindless_resource_range</name>
        <param>
          <type>uint32_t</type>
          <declname>resource_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>current_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>new_count</declname>
        </param>
        <briefdescription>
<para>Resizes a previously allocated bindless slot range. </para>
        </briefdescription>
        <detaileddescription>
<para>It can shrink and enlarge a slot range. The contents of all slots of the old range are migrated to the new range, so only new entries have to be updated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of resource to resize the slot range for. Must be one of RES3D_ enum values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the slot range to resize. Must be in a previously allocated bindless range, or any value if &apos;current_count&apos; is 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The current count of slots in the range. Must be within a previously allocated bindless slot range or 0, when 0 then it behaves like &apos;allocate_bindless_resource_range&apos;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The new count of slots in the range. Can be larger or smaller than &apos;current_count&apos;, shrinks or enlarges the slot range accordingly. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first slot of the new range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="62" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="62" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1a258242f9a270cd02ddc3414bf0eeb26c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::free_bindless_resource_range</definition>
        <argsstring>(uint32_t resource_type, uint32_t index, uint32_t count)</argsstring>
        <name>free_bindless_resource_range</name>
        <param>
          <type>uint32_t</type>
          <declname>resource_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Frees a previously allocated slot range. </para>
        </briefdescription>
        <detaileddescription>
<para>This can also be used to shrink ranges, similarly to &apos;resize_bindless_resource_range&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of resource to free the slot range for. Must be one of RES3D_ enum values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the slot range to free. Must be in a previously allocated bindless range, or any value if &apos;count&apos; is 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of slots to free. Must not exceed the previously allocated bindless slot range. Can be 0 which will be a no-op. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="75" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1aae0554c805a339e7536c0a08ec6e8a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::update_bindless_resource</definition>
        <argsstring>(uint32_t index, D3dResource *res)</argsstring>
        <name>update_bindless_resource</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_d3d_resource" kindref="compound">D3dResource</ref> *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Updates a given bindless slot with the reference to &apos;res&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>The slot has to be allocated previously with the corresponding allocation methods with &apos;resource_type&apos; matching the restype of &apos;res&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the bindless slot to update. Must be in a previously allocated bindless range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="class_d3d_resource" kindref="compound">D3dResource</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="86" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__bindless_8h_1a1bdd1a550e4cf48d93eb7e61d6520f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::update_bindless_resources_to_null</definition>
        <argsstring>(uint32_t resource_type, uint32_t index, uint32_t count)</argsstring>
        <name>update_bindless_resources_to_null</name>
        <param>
          <type>uint32_t</type>
          <declname>resource_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Updates one or more bindless slots with a &quot;null&quot; resource of the given type. </para>
        </briefdescription>
        <detaileddescription>
<para>Shader access to those slots will read all zeros and writes will be discarded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of resource to update with null. Must be one of RES3D_ enum values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the bindless slot to update. Must be in a previously allocated bindless range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of slots to update. Must not exceed the previously allocated bindless slot range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" line="97" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_bindless.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_model_version_8h_1a40203b32b7ccabeb87fbad3ebef1e52a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::as_string</definition>
        <argsstring>(d3d::shadermodel::Version v)</argsstring>
        <name>as_string</name>
        <param>
          <type><ref refid="structd3d_1_1shadermodel_1_1_version" kindref="compound">d3d::shadermodel::Version</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;&lt;major&gt;.&lt;minor&gt;&quot; string representation of a Version value that is part of d3d::smAny. <computeroutput>v</computeroutput> Version for which string it should be returned. <simplesect kind="return"><para>A valid constant string for versions included in d3d::smAny. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="761" column="19" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="761" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_model_version_8h_1ab8b9dd8a81ea8ba1be9553d34c0383f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::as_string</definition>
        <argsstring>(d3d::shadermodel::VersionWithName v)</argsstring>
        <name>as_string</name>
        <param>
          <type><ref refid="structd3d_1_1shadermodel_1_1_version_with_name" kindref="compound">d3d::shadermodel::VersionWithName</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;&lt;major&gt;.&lt;minor&gt;&quot; string representation of a VersionWithName value. <computeroutput>v</computeroutput> Version for which string it should be returned. <simplesect kind="return"><para><computeroutput>versionName</computeroutput> member of <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="774" column="19" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="774" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_model_version_8h_1a557db04d81c857e8c7ba078a9b8bce29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::as_ps_string</definition>
        <argsstring>(d3d::shadermodel::Version v)</argsstring>
        <name>as_ps_string</name>
        <param>
          <type><ref refid="structd3d_1_1shadermodel_1_1_version" kindref="compound">d3d::shadermodel::Version</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;ps&lt;major&gt;&lt;minor&gt;&quot; string representation of a Version value that is part of d3d::smAny. <computeroutput>v</computeroutput> Version for which string it should be returned. <simplesect kind="return"><para>A valid constant string for versions included in d3d::smAny. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="778" column="19" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="778" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_model_version_8h_1a28d97ffb7749ad551dd364115c688a17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::as_ps_string</definition>
        <argsstring>(d3d::shadermodel::VersionWithName v)</argsstring>
        <name>as_ps_string</name>
        <param>
          <type><ref refid="structd3d_1_1shadermodel_1_1_version_with_name" kindref="compound">d3d::shadermodel::VersionWithName</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;ps&lt;major&gt;&lt;minor&gt;&quot; string representation of a VersionWithName value. <computeroutput>v</computeroutput> Version for which string it should be returned. <simplesect kind="return"><para><computeroutput>psName</computeroutput> member of <computeroutput>v</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" line="791" column="19" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shaderModelVersion.h" bodystart="791" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1ga74eda8748fd36b24aef174a817852158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref></type>
        <definition>ResourceAllocationProperties d3d::get_resource_allocation_properties</definition>
        <argsstring>(const ResourceDescription &amp;desc)</argsstring>
        <name>get_resource_allocation_properties</name>
        <param>
          <type>const <ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Retrieves the resource allocation properties for a given resource description. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource description. Resource descriptions that would describe a resource with one or more of its dimensions being 0 will result in an error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resource allocation properties. On error sizeInBytes field of the returned value will be 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="357" column="30" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="357" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1gac36619884aaa62ab903c24930d4baf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ResourceHeap *</type>
        <definition>ResourceHeap* d3d::create_resource_heap</definition>
        <argsstring>(ResourceHeapGroup *heap_group, size_t size, ResourceHeapCreateFlags flags)</argsstring>
        <name>create_resource_heap</name>
        <param>
          <type>ResourceHeapGroup *</type>
          <declname>heap_group</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ResourceHeapCreateFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Creates a resource heap with the specified size and flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource heap group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the resource heap in bytes. A value of 0 is invalid and results in undefined behavior. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for creating the resource heap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created resource heap. May be nullptr on error, like out of memory or invalid inputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="368" column="14" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="368" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1ga3f17897004713db3b260104f811fac38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::destroy_resource_heap</definition>
        <argsstring>(ResourceHeap *heap)</argsstring>
        <name>destroy_resource_heap</name>
        <param>
          <type>ResourceHeap *</type>
          <declname>heap</declname>
        </param>
        <briefdescription>
<para>Destroys a resource heap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource heap to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="375" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="375" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1gad8a9b4cd184af239aea4f8f94d0fe74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
        <definition>Sbuffer* d3d::place_buffer_in_resource_heap</definition>
        <argsstring>(ResourceHeap *heap, const ResourceDescription &amp;desc, size_t offset, const ResourceAllocationProperties &amp;alloc_info, const char *name)</argsstring>
        <name>place_buffer_in_resource_heap</name>
        <param>
          <type>ResourceHeap *</type>
          <declname>heap</declname>
        </param>
        <param>
          <type>const <ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref> &amp;</type>
          <declname>alloc_info</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Places a buffer in a resource heap at the specified offset. </para>
        </briefdescription>
        <detaileddescription>
<para>The heap group of heap has to match the heap group of alloc_info that was returned by get_resource_allocation_properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource heap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource description. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in the resource heap in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource allocation properties. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the placed buffer. May be nullptr on error, like invalid inputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="390" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="390" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1ga386cc0aaee632b39d1575cffcc8a56dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::place_texture_in_resource_heap</definition>
        <argsstring>(ResourceHeap *heap, const ResourceDescription &amp;desc, size_t offset, const ResourceAllocationProperties &amp;alloc_info, const char *name)</argsstring>
        <name>place_texture_in_resource_heap</name>
        <param>
          <type>ResourceHeap *</type>
          <declname>heap</declname>
        </param>
        <param>
          <type>const <ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref> &amp;</type>
          <declname>alloc_info</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Places a texture in a resource heap at the specified offset. </para>
        </briefdescription>
        <detaileddescription>
<para>The heap group of heap has to match the heap group of alloc_info that was returned by get_resource_allocation_properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource heap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource description. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in the resource heap in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource allocation properties. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the placed texture. May be nullptr on error, like invalid inputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="406" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="406" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1gaf0ae51e5486b049c6204482c7ec3d0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_resource_heap_group_properties" kindref="compound">ResourceHeapGroupProperties</ref></type>
        <definition>ResourceHeapGroupProperties d3d::get_resource_heap_group_properties</definition>
        <argsstring>(ResourceHeapGroup *heap_group)</argsstring>
        <name>get_resource_heap_group_properties</name>
        <param>
          <type>ResourceHeapGroup *</type>
          <declname>heap_group</declname>
        </param>
        <briefdescription>
<para>Retrieves the resource heap group properties for a given resource heap group. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Different groups may return identical values, this does not mean that the heap group is identical or can be substituted for each another. Heap groups represent purpose bound memory that may have device specific properties, that limit the use of a heap group for certain resource types.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource heap group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resource heap group properties. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="420" column="29" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="420" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1ga128fdcfd86da452ab1b569991b3bb5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::activate_buffer</definition>
        <argsstring>(Sbuffer *buf, ResourceActivationAction action, const ResourceClearValue &amp;value={}, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>activate_buffer</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ResourceActivationAction</type>
          <declname>action</declname>
        </param>
        <param>
          <type>const <ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref> &amp;</type>
          <declname>value</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
<para>Activates a buffer with the specified action and optional clear value. </para>
        </briefdescription>
        <detaileddescription>
<para>Only activated placed buffer could be safely used. Using the buffer before being activated results in undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to activate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The activation action. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The clear value (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU pipeline to use (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>gpu_pipeline parameter doesn&apos;t work currently. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="433" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="433" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1gaaab49f2901a3be5d400072524fb899ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::activate_texture</definition>
        <argsstring>(BaseTexture *tex, ResourceActivationAction action, const ResourceClearValue &amp;value={}, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>activate_texture</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>ResourceActivationAction</type>
          <declname>action</declname>
        </param>
        <param>
          <type>const <ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref> &amp;</type>
          <declname>value</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
<para>Activates a texture with the specified action and optional clear value. </para>
        </briefdescription>
        <detaileddescription>
<para>Only activated placed textures could be safely used. Using the texture before being activated results in undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to activate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The activation action. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The clear value (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU pipeline to use (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>gpu_pipeline parameter doesn&apos;t work currently. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="447" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="447" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1ga091d80364b236ac72510a8dc9a55509d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::deactivate_buffer</definition>
        <argsstring>(Sbuffer *buf, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>deactivate_buffer</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
<para>Deactivates a buffer with the specified GPU pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>The method call is necessary to have a correct state of the resources on a heap. Using the buffer after being deactivated results in undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The placed buffer to deactivate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU pipeline to use (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>gpu_pipeline parameter doesn&apos;t work currently. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="460" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="460" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___heap_d3_d_1ga75e759cf1d8dbc483d3162580be929c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::deactivate_texture</definition>
        <argsstring>(BaseTexture *tex, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>deactivate_texture</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
<para>Deactivates a texture with the specified GPU pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>The method call is necessary to have a correct state of the resources on a heap. Using the texture after being deactivated results in undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The placed texture to deactivate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU pipeline to use (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>gpu_pipeline parameter doesn&apos;t work currently. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" line="472" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_heap.h" declline="472" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1ae441b2eb0ba406fcc15dbc1dde3dee50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::copy_from_current_render_target</definition>
        <argsstring>(BaseTexture *to_tex)</argsstring>
        <name>copy_from_current_render_target</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>to_tex</declname>
        </param>
        <briefdescription>
<para>Copy the current render target to a texture. It is useful to get a backbuffer content on such drivers as Metal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to_tex</parametername>
</parameternamelist>
<parameterdescription>
<para>Texture to copy the current render target to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="53" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1abbe9addf6818cb5f3764e8f575d8b3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::clear_rt</definition>
        <argsstring>(const RenderTarget &amp;rt, const ResourceClearValue &amp;clear_val={})</argsstring>
        <name>clear_rt</name>
        <param>
          <type>const <ref refid="struct_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>rt</declname>
        </param>
        <param>
          <type>const <ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref> &amp;</type>
          <declname>clear_val</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Clear the render target. Perform full clear on the RT according to its&apos; creation flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rt</parametername>
</parameternamelist>
<parameterdescription>
<para>Render target to clear. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Clear value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="62" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a1b449228601334a2df5185520ed4c6da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_target</definition>
        <argsstring>()</argsstring>
        <name>set_render_target</name>
        <briefdescription>
<para>Set the default render target (backbuffer) as a single current render target. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="68" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a9a3ad67c6ca271bac823cd238f940426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_depth</definition>
        <argsstring>(BaseTexture *tex, DepthAccess access)</argsstring>
        <name>set_depth</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>DepthAccess</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Set the depth texture target. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>Texture to set as depth target. NULL means NO depth. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mode for the depth attachment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="77" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1ac6cff2b2f2409dc2b3f62736aee6bb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_depth</definition>
        <argsstring>(BaseTexture *tex, int layer, DepthAccess access)</argsstring>
        <name>set_depth</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>DepthAccess</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Set the depth texture target. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>Texture to set as depth target. NULL means NO depth. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer of the tex to set as depth target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mode for the depth attachment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="87" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1ad9a81f30be394f004099ba1950b7334e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_target</definition>
        <argsstring>(int rt_index, BaseTexture *, int fc, uint8_t level)</argsstring>
        <name>set_render_target</name>
        <param>
          <type>int</type>
          <declname>rt_index</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        </param>
        <param>
          <type>int</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the render target for rendering. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if texture is depth texture format, it is the same as call set_depth() DON&apos;T USE THIS BEHAVIOR!!! </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use set_render_target(RenderTarget depth, DepthAccess depth_access, dag::ConstSpan&lt;RenderTarget&gt; colors) instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rt_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the render target. The maximum number of render targets is defined by Driver3dRenderTarget::MAX_SIMRT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="class_base_texture" kindref="compound">BaseTexture</ref> object representing the render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The face of the texture (for cube textures and texture arrays). If face is RENDER_TO_WHOLE_ARRAY, then the whole Texture Array/Volume Tex will be set as render target. This is to be used with geom shader (and Metal allows with vertex shader). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the render target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the render target was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="102" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a1e62ac21a8d9982ae14e04de9d92f22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_target</definition>
        <argsstring>(int rt_index, BaseTexture *, uint8_t level)</argsstring>
        <name>set_render_target</name>
        <param>
          <type>int</type>
          <declname>rt_index</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the render target for rendering. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if texture is depth texture format, it is the same as call set_depth() DON&apos;T USE THIS BEHAVIOR!!! </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use set_render_target(RenderTarget depth, DepthAccess depth_access, dag::ConstSpan&lt;RenderTarget&gt; colors) instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rt_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the render target. The maximum number of render targets is defined by Driver3dRenderTarget::MAX_SIMRT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="class_base_texture" kindref="compound">BaseTexture</ref> object representing the render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the render target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the render target was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="115" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="115" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a0c9762a8b10d55794a731a8229addcea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_target</definition>
        <argsstring>(BaseTexture *t, uint8_t level)</argsstring>
        <name>set_render_target</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the render target for rendering. All other render targets will be set to nullptr. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if texture is depth texture format, it is the same as call set_depth() DON&apos;T USE THIS BEHAVIOR!!! </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use set_render_target(RenderTarget depth, DepthAccess depth_access, dag::ConstSpan&lt;RenderTarget&gt; colors) instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="class_base_texture" kindref="compound">BaseTexture</ref> object representing the render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the render target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the render target was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="127" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1afd6679cb8c61d1b5b767b0e79dc45797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_target</definition>
        <argsstring>(BaseTexture *t, int fc, uint8_t level)</argsstring>
        <name>set_render_target</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the render target for rendering. All other render targets will be set to nullptr. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if texture is depth texture format, it is the same as call set_depth() DON&apos;T USE THIS BEHAVIOR!!! </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use set_render_target(RenderTarget depth, DepthAccess depth_access, dag::ConstSpan&lt;RenderTarget&gt; colors) instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="class_base_texture" kindref="compound">BaseTexture</ref> object representing the render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The face of the texture (for cube textures and texture arrays). If face is RENDER_TO_WHOLE_ARRAY, then the whole Texture Array/Volume Tex will be set as render target. This is to be used with geom shader (and Metal allows with vertex shader). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the render target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the render target was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="141" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1aa77495ed9ff6ae729c089323ac72f4ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::set_render_target</definition>
        <argsstring>(RenderTarget depth, DepthAccess depth_access, dag::ConstSpan&lt; RenderTarget &gt; colors)</argsstring>
        <name>set_render_target</name>
        <param>
          <type><ref refid="struct_render_target" kindref="compound">RenderTarget</ref></type>
          <declname>depth</declname>
        </param>
        <param>
          <type>DepthAccess</type>
          <declname>depth_access</declname>
        </param>
        <param>
          <type>dag::ConstSpan&lt; <ref refid="struct_render_target" kindref="compound">RenderTarget</ref> &gt;</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
<para>Sets the render target for rendering. All other render targets will be set to nullptr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_access</parametername>
</parameternamelist>
<parameterdescription>
<para>The access mode for the depth attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colors</parametername>
</parameternamelist>
<parameterdescription>
<para>The color render targets. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the render target was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="154" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a70a77806b62eb41cc4cb685a9218cd76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::set_render_target</definition>
        <argsstring>(RenderTarget depth, DepthAccess depth_access, const std::initializer_list&lt; RenderTarget &gt; colors)</argsstring>
        <name>set_render_target</name>
        <param>
          <type><ref refid="struct_render_target" kindref="compound">RenderTarget</ref></type>
          <declname>depth</declname>
        </param>
        <param>
          <type>DepthAccess</type>
          <declname>depth_access</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; <ref refid="struct_render_target" kindref="compound">RenderTarget</ref> &gt;</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
<para>Sets the render target for rendering. All other render targets will be set to nullptr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_access</parametername>
</parameternamelist>
<parameterdescription>
<para>The access mode for the depth attachment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colors</parametername>
</parameternamelist>
<parameterdescription>
<para>The color render targets. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the render target was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="173" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1af9749109c1cffb149f8cbb717dbcfcdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_render_target</definition>
        <argsstring>(Driver3dRenderTarget &amp;out_rt)</argsstring>
        <name>get_render_target</name>
        <param>
          <type><ref refid="struct_driver3d_render_target" kindref="compound">Driver3dRenderTarget</ref> &amp;</type>
          <declname>out_rt</declname>
        </param>
        <briefdescription>
<para>Get the render target object. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Don&apos;t use it since the method relies on a global state.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_rt</parametername>
</parameternamelist>
<parameterdescription>
<para>The render target object to fill. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="185" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a19389294b01679a03fb8351718bd9d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_target</definition>
        <argsstring>(const Driver3dRenderTarget &amp;rt)</argsstring>
        <name>set_render_target</name>
        <param>
          <type>const <ref refid="struct_driver3d_render_target" kindref="compound">Driver3dRenderTarget</ref> &amp;</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Set the render target object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rt</parametername>
</parameternamelist>
<parameterdescription>
<para>The render target object to set. Usually, it is obtained by get_render_target(Driver3dRenderTarget &amp;out_rt). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="193" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a32ba0b93e0029c75fad830eb591e4453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::get_target_size</definition>
        <argsstring>(int &amp;w, int &amp;h)</argsstring>
        <name>get_target_size</name>
        <param>
          <type>int &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Get the size of the render target. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>If you need to use the method, it seems that you are doing something wrong.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the render target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the render target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="204" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a195d3165dc9677bc46b7f4909514eeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::get_render_target_size</definition>
        <argsstring>(int &amp;w, int &amp;h, BaseTexture *rt_tex, uint8_t level=0)</argsstring>
        <name>get_render_target_size</name>
        <param>
          <type>int &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>rt_tex</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the size of the render target texture. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>If you need to use the method, it seems that you are doing something wrong.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the render target texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the render target texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rt_tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The render target texture. If nullptr, the size of the backbuffer will be written to w and h. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the render target texture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="217" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="217" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a85503ffed990ac67ee35f3094bf376da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::clearview</definition>
        <argsstring>(int what, E3DCOLOR c, float z, uint32_t stencil)</argsstring>
        <name>clearview</name>
        <param>
          <type>int</type>
          <declname>what</declname>
        </param>
        <param>
          <type>E3DCOLOR</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stencil</declname>
        </param>
        <briefdescription>
<para>clear all view </para>
        </briefdescription>
        <detaileddescription>
<para>Clear the view. What is view will be explained in the params.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>The view to clear. It can be one of the CLEAR_*** enum. It will clears either color, depth, or stencil buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The color to clear the view with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth to clear the view with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stencil</parametername>
</parameternamelist>
<parameterdescription>
<para>The stencil to clear the view with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="229" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1a74fa30565879cd55fbc1f66adce6c31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_screen_size</definition>
        <argsstring>(int &amp;w, int &amp;h)</argsstring>
        <name>get_screen_size</name>
        <param>
          <type>int &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Get the size of the screen (backbuffer). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The size of the screen can be different from the size of the framebuffer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the screen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the screen. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="239" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="239" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1ab804736ee08af04ffccf0a8c0b100054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">Texture</ref> *</type>
        <definition>Texture* d3d::get_backbuffer_tex</definition>
        <argsstring>()</argsstring>
        <name>get_backbuffer_tex</name>
        <briefdescription>
<para>Get the backbuffer texture. </para>
        </briefdescription>
        <detaileddescription>
<para>Backbuffer is only valid while the GPU is acquired, and can be recreated in between.</para>
<para><simplesect kind="return"><para>The backbuffer texture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="248" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="248" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_target_8h_1aa0e93e2bc302867cf87dbfaf9fc16280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">Texture</ref> *</type>
        <definition>Texture* d3d::get_secondary_backbuffer_tex</definition>
        <argsstring>()</argsstring>
        <name>get_secondary_backbuffer_tex</name>
        <briefdescription>
<para>Get the secondary backbuffer texture. </para>
        </briefdescription>
        <detaileddescription>
<para>Secondary backbuffer is only valid while the GPU is acquired, and can be recreated in between. It exists only for Xbox. Mostly used as a backbuffer with a higher resolution to draw UI.</para>
<para><simplesect kind="return"><para>The secondary backbuffer texture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" line="258" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderTarget.h" declline="258" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__dispatch_8h_1a9192c1bbcda9ddc9f494fabb03443996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::dispatch</definition>
        <argsstring>(uint32_t thread_group_x, uint32_t thread_group_y, uint32_t thread_group_z, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>dispatch</name>
        <param>
          <type>uint32_t</type>
          <declname>thread_group_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>thread_group_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>thread_group_z</declname>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
<para>Dispatches a compute shader with the specified thread group dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_group_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of thread groups in the X dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_group_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of thread groups in the Y dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_group_z</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of thread groups in the Z dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU pipeline to use for dispatching (default: GpuPipeline::GRAPHICS). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>gpu_pipeline argument doesn&apos;t work currently. </para>
</simplesect>
<simplesect kind="return"><para>True if the dispatch was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatch.h" line="24" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatch.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__dispatch_8h_1aa7ce4e599fd6b7aba78f1826ed981826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::dispatch_indirect</definition>
        <argsstring>(Sbuffer *args, uint32_t byte_offset=0, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>dispatch_indirect</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
<para>Dispatches a compute shader indirectly using the specified argument buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument buffer containing the dispatch parameters. The buffer must be created with the d3d::buffers::create_indirect or d3d::buffers::create_ua_indirect methods and Indirect::Dispatch argument. The buffer should contain the following data: uint32_t thread_group_x, uint32_t thread_group_y, uint32_t thread_group_z. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset within the argument buffer (default: 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gpu_pipeline</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU pipeline to use for dispatching (default: GpuPipeline::GRAPHICS). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>gpu_pipeline argument doesn&apos;t work currently. </para>
</simplesect>
<simplesect kind="return"><para>True if the dispatch was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatch.h" line="38" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatch.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1adcc24b512dad42aa5511c63a57f98217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ResUpdateBuffer *</type>
        <definition>ResUpdateBuffer* d3d::allocate_update_buffer_for_tex_region</definition>
        <argsstring>(BaseTexture *dest_base_texture, unsigned dest_mip, unsigned dest_slice, unsigned offset_x, unsigned offset_y, unsigned offset_z, unsigned width, unsigned height, unsigned depth)</argsstring>
        <name>allocate_update_buffer_for_tex_region</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>dest_base_texture</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dest_mip</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dest_slice</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset_x</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset_y</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset_z</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>width</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>height</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>Allocates a update buffer to update the subregion described by offset_x, offset_y, offset_z, width, height and depth. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>dest_base_texture can not be nullptr.</para>
</listitem><listitem><para>dest_mip must be a valid mipmap level for dest_base_texture</para>
</listitem><listitem><para>dest_slice must be a valid array index / cube face for dest_base_texture when it is a array, cube or cube array texture, otherwise has to be 0</para>
</listitem><listitem><para>offset_x must be within the width of dest_base_texture of miplevel dest_mip and aligned to the texture format block size</para>
</listitem><listitem><para>offset_y must be within the height of dest_base_texture of miplevel dest_mip and aligned to the texture format block size</para>
</listitem><listitem><para>offset_z must be within the depth of dest_base_texture of miplevel dest_mip when the texture is a vol tex, otherwise has to be 0</para>
</listitem><listitem><para>width plus offset_x must be within the width of dest_base_texture of miplevel dest_mip and aligned to the texture format block size</para>
</listitem><listitem><para>height plus offset_y must be within the height of dest_base_texture of miplevel dest_mip and aligned to the texture format block size</para>
</listitem><listitem><para>depth plus offset_z must be within the depth of dest_base_texture of miplevel dest_mip when the texture is a vol tex, otherwise has to be 1</para>
</listitem></itemizedlist>
</para>
<para>May return nullptr if either inputs violate the rules above, the driver can currently not provide the memory required or the driver is unable to perform the needed copy operation on update. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="45" column="17" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="45" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1aaedc608c1d55a1a5d691ff6f73905fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ResUpdateBuffer *</type>
        <definition>ResUpdateBuffer* d3d::allocate_update_buffer_for_tex</definition>
        <argsstring>(BaseTexture *dest_tex, int dest_mip, int dest_slice)</argsstring>
        <name>allocate_update_buffer_for_tex</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>dest_tex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_mip</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_slice</declname>
        </param>
        <briefdescription>
<para>Allocates update buffer in system memory to be filled directly and then dispatched to apply_tex_update_buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method can fail if too much allocations happens in N-frame period. Caller should retry after rendering frame on screen if this happens.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest_tex</parametername>
</parameternamelist>
<parameterdescription>
<para>destination texture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_mip</parametername>
</parameternamelist>
<parameterdescription>
<para>destination mip level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_slice</parametername>
</parameternamelist>
<parameterdescription>
<para>destination slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to update buffer or nullptr if allocation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="59" column="17" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1a2fe916f100929967fa9742c59d975f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::release_update_buffer</definition>
        <argsstring>(ResUpdateBuffer *&amp;rub)</argsstring>
        <name>release_update_buffer</name>
        <param>
          <type>ResUpdateBuffer *&amp;</type>
          <declname>rub</declname>
        </param>
        <briefdescription>
<para>Releases update buffer (clears pointer afterwards); skips any update, just releases data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rub</parametername>
</parameternamelist>
<parameterdescription>
<para>update buffer to release </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="65" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1a8934287bc4ff138a5869b5cdb0d3cce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* d3d::get_update_buffer_addr_for_write</definition>
        <argsstring>(ResUpdateBuffer *rub)</argsstring>
        <name>get_update_buffer_addr_for_write</name>
        <param>
          <type>ResUpdateBuffer *</type>
          <declname>rub</declname>
        </param>
        <briefdescription>
<para>Returns data address to fill update data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rub</parametername>
</parameternamelist>
<parameterdescription>
<para>update buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to memory that should be filled with data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="72" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1a5de76a26d3b646de9f97e090cf033cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t d3d::get_update_buffer_size</definition>
        <argsstring>(ResUpdateBuffer *rub)</argsstring>
        <name>get_update_buffer_size</name>
        <param>
          <type>ResUpdateBuffer *</type>
          <declname>rub</declname>
        </param>
        <briefdescription>
<para>Returns size of update buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rub</parametername>
</parameternamelist>
<parameterdescription>
<para>update buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of update buffer in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="79" column="8" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="79" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1a387e756ba0ef9df2928c1c53993ec4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t d3d::get_update_buffer_pitch</definition>
        <argsstring>(ResUpdateBuffer *rub)</argsstring>
        <name>get_update_buffer_pitch</name>
        <param>
          <type>ResUpdateBuffer *</type>
          <declname>rub</declname>
        </param>
        <briefdescription>
<para>Returns pitch of update buffer (if applicable) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rub</parametername>
</parameternamelist>
<parameterdescription>
<para>update buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pitch of update buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="86" column="8" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="86" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1a05d01cd9ea1b6f32fd8ee33b218ab107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t d3d::get_update_buffer_slice_pitch</definition>
        <argsstring>(ResUpdateBuffer *rub)</argsstring>
        <name>get_update_buffer_slice_pitch</name>
        <param>
          <type>ResUpdateBuffer *</type>
          <declname>rub</declname>
        </param>
        <briefdescription>
<para>Returns the pitch of one 2d image slice for volumetric textures. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rub</parametername>
</parameternamelist>
<parameterdescription>
<para>update buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pitch of of a slice in the update buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="93" column="8" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="93" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__res_update_buffer_8h_1a0a4242326b70e499628e3600f1505630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::update_texture_and_release_update_buffer</definition>
        <argsstring>(ResUpdateBuffer *&amp;src_rub)</argsstring>
        <name>update_texture_and_release_update_buffer</name>
        <param>
          <type>ResUpdateBuffer *&amp;</type>
          <declname>src_rub</declname>
        </param>
        <briefdescription>
<para>applies update to target d3dres and releases update buffer (clears pointer afterwards) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src_rub</parametername>
</parameternamelist>
<parameterdescription>
<para>update buffer to apply </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if update was successful, false if update failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" line="100" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_resUpdateBuffer.h" declline="100" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a2927acb6cf349757dc7ac93a19fb70f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::draw_base</definition>
        <argsstring>(int type, int start, int numprim, uint32_t num_instances, uint32_t start_instance)</argsstring>
        <name>draw_base</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_instances</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start_instance</declname>
        </param>
        <briefdescription>
<para>Draw primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the primitives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_instances</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of instances to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting instance index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="23" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a3f0a139b370c92d6acd27faa80c71475" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::draw</definition>
        <argsstring>(int type, int start, int numprim)</argsstring>
        <name>draw</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <briefdescription>
<para>Draw primitives with a single instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the primitives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="33" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a99a80accf3011cd4ab52ce47c8c9341e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::draw_instanced</definition>
        <argsstring>(int type, int start, int numprim, uint32_t num_instances, uint32_t start_instance=0)</argsstring>
        <name>draw_instanced</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_instances</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start_instance</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Draw primitives with multiple instances. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the primitives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_instances</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of instances to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting instance index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="45" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a5c8836595266a317fbaa2d1efa0048ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::drawind_base</definition>
        <argsstring>(int type, int startind, int numprim, int base_vertex, uint32_t num_instances, uint32_t start_instance)</argsstring>
        <name>drawind_base</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_vertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_instances</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start_instance</declname>
        </param>
        <briefdescription>
<para>Draw indexed primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startind</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the primitives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vertex index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_instances</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of instances to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting instance index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="61" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a388980f16349c3f802c35e30c82045fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::drawind_instanced</definition>
        <argsstring>(int type, int startind, int numprim, int base_vertex, uint32_t num_instances, uint32_t start_instance=0)</argsstring>
        <name>drawind_instanced</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_vertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_instances</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start_instance</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Draw indexed primitives with multiple instances. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startind</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the primitives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vertex index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_instances</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of instances to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting instance index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="74" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a26e09225f3a27a420a614ea218ea3ca9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::drawind</definition>
        <argsstring>(int type, int startind, int numprim, int base_vertex)</argsstring>
        <name>drawind</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base_vertex</declname>
        </param>
        <briefdescription>
<para>Draw indexed primitives with a single instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startind</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the primitives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vertex index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="89" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1adac2b4d45c26f003f9b9800ec1298a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::draw_up</definition>
        <argsstring>(int type, int numprim, const void *ptr, int stride_bytes)</argsstring>
        <name>draw_up</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_bytes</declname>
        </param>
        <briefdescription>
<para>Draw primitives from a user pointer (rather slow). </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Remove this method. It uncontrollably allocates memory in driver.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the vertex data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride between vertices in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="105" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a0aa110e2b523339984d628c2668f63ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::drawind_up</definition>
        <argsstring>(int type, int minvert, int numvert, int numprim, const uint16_t *ind, const void *ptr, int stride_bytes)</argsstring>
        <name>drawind_up</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minvert</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numvert</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numprim</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>ind</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_bytes</declname>
        </param>
        <briefdescription>
<para>Draw indexed primitives from a user pointer (rather slow). </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000009"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Remove this method. It uncontrollably allocates memory in driver.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum vertex index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numprim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of primitives to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ind</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the index data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the vertex data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride between vertices in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="121" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1ac35a390ee14b676945fb9934f7e0d8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::draw_indirect</definition>
        <argsstring>(int type, Sbuffer *args, uint32_t byte_offset=0)</argsstring>
        <name>draw_indirect</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Draw primitives using indirect parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the draw parameters. The buffer must contain <ref refid="struct_draw_indirect_args" kindref="compound">DrawIndirectArgs</ref> structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="131" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1aef89345c5d39827b8059418f1d1eab34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::draw_indexed_indirect</definition>
        <argsstring>(int type, Sbuffer *args, uint32_t byte_offset=0)</argsstring>
        <name>draw_indexed_indirect</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Draw indexed primitives using indirect parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the draw parameters. The buffer must contain <ref refid="struct_draw_indexed_indirect_args" kindref="compound">DrawIndexedIndirectArgs</ref> structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="141" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1acb7277010be7d64a8466c1162655d129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::multi_draw_indirect</definition>
        <argsstring>(int prim_type, Sbuffer *args, uint32_t draw_count, uint32_t stride_bytes, uint32_t byte_offset=0)</argsstring>
        <name>multi_draw_indirect</name>
        <param>
          <type>int</type>
          <declname>prim_type</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>draw_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Draw multiple instances of primitives using indirect parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prim_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the draw parameters. The buffer must contain <ref refid="struct_draw_indirect_args" kindref="compound">DrawIndirectArgs</ref> structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>draw_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of draw calls. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride between draw parameters in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="153" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__draw_8h_1a718571779b2017a7774cd581520f941e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::multi_draw_indexed_indirect</definition>
        <argsstring>(int prim_type, Sbuffer *args, uint32_t draw_count, uint32_t stride_bytes, uint32_t byte_offset=0)</argsstring>
        <name>multi_draw_indexed_indirect</name>
        <param>
          <type>int</type>
          <declname>prim_type</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>draw_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Draw multiple instances of indexed primitives using indirect parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prim_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of primitives to draw. One of PRIM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the draw parameters. The buffer must contain <ref refid="struct_draw_indexed_indirect_args" kindref="compound">DrawIndexedIndirectArgs</ref> structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>draw_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of draw calls. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride between draw parameters in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the draw operation was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" line="165" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_draw.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a4ed2ab8b42ec71b70da6c070fd775363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::update_window_mode</definition>
        <argsstring>()</argsstring>
        <name>update_window_mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="65" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aa0bc22c1f07cea2f37749ce21d960075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::init_driver</definition>
        <argsstring>()</argsstring>
        <name>init_driver</name>
        <briefdescription>
<para>initalizes 3d device driver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="72" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ad725146ae57b26ebb9b05f65b9a011bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::is_inited</definition>
        <argsstring>()</argsstring>
        <name>is_inited</name>
        <briefdescription>
<para>returns true when d3d API is inited </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="75" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a186310cef7b61e92c0551be034e2d454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::init_video</definition>
        <argsstring>(void *hinst, main_wnd_f *, const char *wcname, int ncmdshow, void *&amp;mainwnd, void *renderwnd, void *hicon, const char *title, Driver3dInitCallback *cb)</argsstring>
        <name>init_video</name>
        <param>
          <type>void *</type>
          <declname>hinst</declname>
        </param>
        <param>
          <type>main_wnd_f *</type>
        </param>
        <param>
          <type>const char *</type>
          <declname>wcname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncmdshow</declname>
        </param>
        <param>
          <type>void *&amp;</type>
          <declname>mainwnd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>renderwnd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hicon</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="class_driver3d_init_callback" kindref="compound">Driver3dInitCallback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>start up, read cfg, create window, init 3d hard&amp;soft, ... if renderwnd!=NULL, mainwnd and renderwnd are used for rendering (when possible) on error, returns false on sucess, return true </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="81" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aea361cad7afab93185d74b2299072a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::release_driver</definition>
        <argsstring>()</argsstring>
        <name>release_driver</name>
        <briefdescription>
<para>shutdown driver and release all resources </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="85" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a8ab3cd6957f1253c3887de63a20d5f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::fill_interface_table</definition>
        <argsstring>(D3dInterfaceTable &amp;d3dit)</argsstring>
        <name>fill_interface_table</name>
        <param>
          <type><ref refid="struct_d3d_interface_table" kindref="compound">D3dInterfaceTable</ref> &amp;</type>
          <declname>d3dit</declname>
        </param>
        <briefdescription>
<para>fills function-pointers table for d3d API, or returns false if unsupported </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="88" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a149b153338e3dc0e06d291593801a60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::prepare_for_destroy</definition>
        <argsstring>()</argsstring>
        <name>prepare_for_destroy</name>
        <briefdescription>
<para>notify driver before window destruction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="91" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aec4eb6c4d1b8c06690efa1feb137edb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::window_destroyed</definition>
        <argsstring>(void *hwnd)</argsstring>
        <name>window_destroyed</name>
        <param>
          <type>void *</type>
          <declname>hwnd</declname>
        </param>
        <briefdescription>
<para>notify driver on window destruction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="94" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a52c91586663925e3c3bedfb52fe2bced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BeforeWindowDestroyedCookie *</type>
        <definition>BeforeWindowDestroyedCookie* d3d::register_before_window_destroyed_callback</definition>
        <argsstring>(eastl::function&lt; void()&gt; callback)</argsstring>
        <name>register_before_window_destroyed_callback</name>
        <param>
          <type>eastl::function&lt; void()&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="97" column="29" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="97" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ae530ad75fdf0b3d7f75df7db34eb36da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::unregister_before_window_destroyed_callback</definition>
        <argsstring>(BeforeWindowDestroyedCookie *cookie)</argsstring>
        <name>unregister_before_window_destroyed_callback</name>
        <param>
          <type>BeforeWindowDestroyedCookie *</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="98" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="98" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ab801ed189fe16e1552ffa91d625531ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::device_lost</definition>
        <argsstring>(bool *can_reset_now)</argsstring>
        <name>device_lost</name>
        <param>
          <type>bool *</type>
          <declname>can_reset_now</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true when device is lost; when it is safe to reset device can_reset_now is set with 1 returns false when device is ok </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="104" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ab2e68d4ecbe9941f291b92acd54b17b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::reset_device</definition>
        <argsstring>()</argsstring>
        <name>reset_device</name>
        <briefdescription>
<para>performs device reset; returns true if succeded </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="107" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a80e59079bc37b54492a90d3ec3528d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::update_screen</definition>
        <argsstring>(bool app_active=true)</argsstring>
        <name>update_screen</name>
        <param>
          <type>bool</type>
          <declname>app_active</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>flip video pages or copy to screen app_active==false is hint to the driver returns false on error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="114" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a17436c10fd245009e8aa8eae0ba140a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::wait_for_async_present</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>wait_for_async_present</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>If the update_screen(bool) works asynchronously then under certain conditions it will block the execution until the previously called update_screen(bool) is finished. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>Even if the internal conditions don&apos;t require the wait, the execution will wait for the present to finish </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="121" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ac1ac3ddd991b9ba395172fdf28fb5a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::gpu_latency_wait</definition>
        <argsstring>()</argsstring>
        <name>gpu_latency_wait</name>
        <briefdescription>
<para>It blocks the execution until the GPU finishes on going render task for delaying the input sampling and using the most recent user inputs for rendering the next frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="127" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a16bdc2715bb433342570dea11568da05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GPUFENCEHANDLE</type>
        <definition>GPUFENCEHANDLE d3d::insert_fence</definition>
        <argsstring>(GpuPipeline gpu_pipeline)</argsstring>
        <name>insert_fence</name>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="129" column="16" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="129" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aa15ba1a6096d5d161a868b68509310d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::insert_wait_on_fence</definition>
        <argsstring>(GPUFENCEHANDLE &amp;fence, GpuPipeline gpu_pipeline)</argsstring>
        <name>insert_wait_on_fence</name>
        <param>
          <type>GPUFENCEHANDLE &amp;</type>
          <declname>fence</declname>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="130" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ab32f3b04e6b9796a849f047ea57d2e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_srgb_backbuffer_write</definition>
        <argsstring>(bool)</argsstring>
        <name>set_srgb_backbuffer_write</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="135" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a262b21a3040e22df0b9b3f9cb1eb7aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setgamma</definition>
        <argsstring>(float)</argsstring>
        <name>setgamma</name>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="137" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aab705188b8a3b1ab0885c7fe0eca3987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float d3d::get_screen_aspect_ratio</definition>
        <argsstring>()</argsstring>
        <name>get_screen_aspect_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="139" column="7" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="139" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a2e7fa0d6926b121aae06041fc7fd5079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::change_screen_aspect_ratio</definition>
        <argsstring>(float ar)</argsstring>
        <name>change_screen_aspect_ratio</name>
        <param>
          <type>float</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="140" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a41c6a4654ebd422c9bde28ce7272cd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* d3d::fast_capture_screen</definition>
        <argsstring>(int &amp;w, int &amp;h, int &amp;stride_bytes, int &amp;format)</argsstring>
        <name>fast_capture_screen</name>
        <param>
          <type>int &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>stride_bytes</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>capture screen to buffer.fast, but not guaranteed many captures can be followed by only one end_fast_capture_screen() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="146" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a5aec5a1a6f08af14045c74959d7ff0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::end_fast_capture_screen</definition>
        <argsstring>()</argsstring>
        <name>end_fast_capture_screen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="147" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a7a6b0d0be92247d655976f4d9034b37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TexPixel32 *</type>
        <definition>TexPixel32* d3d::capture_screen</definition>
        <argsstring>(int &amp;w, int &amp;h, int &amp;stride_bytes)</argsstring>
        <name>capture_screen</name>
        <param>
          <type>int &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>stride_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>capture screen to TexPixel32 buffer slow, and not 100% guaranted returns NULL on error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="152" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="152" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aeb97c8d8d39d5373bcdde296baace9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::release_capture_buffer</definition>
        <argsstring>()</argsstring>
        <name>release_capture_buffer</name>
        <briefdescription>
<para>release buffer used to capture screen </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="154" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a6b7836ac60b0491977db49cfb23e35e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::create_predicate</definition>
        <argsstring>()</argsstring>
        <name>create_predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>conditional rendering. conditional rendering is used to skip rendering of triangles completelyon GPU. the only commands, that would be ignored, if survey fails are DIPs (all commands and states will still be executed), so it is better to use reports to completely skip object rendering max index is defined per platform surveying. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="163" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="163" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ad944db4b9d0474d2a918d0694403a7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::free_predicate</definition>
        <argsstring>(int id)</argsstring>
        <name>free_predicate</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="164" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1aeff5da89569c30d6cb15cc290a0409df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::begin_survey</definition>
        <argsstring>(int id)</argsstring>
        <name>begin_survey</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="166" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ad7e20216ad746f9ff08056e927b359c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::end_survey</definition>
        <argsstring>(int id)</argsstring>
        <name>end_survey</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="167" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a11c67135385f0c514f347ceb81825817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::begin_conditional_render</definition>
        <argsstring>(int id)</argsstring>
        <name>begin_conditional_render</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="169" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a2c6c8c519e65331a1a2f5186f4ac4325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::end_conditional_render</definition>
        <argsstring>(int id)</argsstring>
        <name>end_conditional_render</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="170" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="170" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1abcccb6ff722e5ab16d50943e8f6b74ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::beginEvent</definition>
        <argsstring>(const char *)</argsstring>
        <name>beginEvent</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="172" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="172" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a862799381004dba92cc3d4af5109e29f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::endEvent</definition>
        <argsstring>()</argsstring>
        <name>endEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="173" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="173" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a991347b00c4abbe26f4a2d60839a71ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::get_vrr_supported</definition>
        <argsstring>()</argsstring>
        <name>get_vrr_supported</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="174" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1abc3dec902a6e26cfd294ffd7b596e313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::get_vsync_enabled</definition>
        <argsstring>()</argsstring>
        <name>get_vsync_enabled</name>
        <briefdescription>
<para>returns current state of VSYNC </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="175" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ac10d075649cf9abfe892df5492192e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::enable_vsync</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enable_vsync</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>enables or disables strong VSYNC (flips only on VBLANK); returns true on success </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="176" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a78ffefd06c3cfb46bafcab5c2c35254a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::resource_barrier</definition>
        <argsstring>(ResourceBarrierDesc desc, GpuPipeline gpu_pipeline=GpuPipeline::GRAPHICS)</argsstring>
        <name>resource_barrier</name>
        <param>
          <type><ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref></type>
          <declname>desc</declname>
        </param>
        <param>
          <type>GpuPipeline</type>
          <declname>gpu_pipeline</declname>
          <defval>GpuPipeline::GRAPHICS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="181" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1af4c6c40be93f1fa32a67acb41422da8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::resummarize_htile</definition>
        <argsstring>(BaseTexture *)</argsstring>
        <name>resummarize_htile</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="188" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1ad22bac99624b092481d3ac723a2d3b2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::set_esram_layout</definition>
        <argsstring>(const wchar_t *)</argsstring>
        <name>set_esram_layout</name>
        <param>
          <type>const wchar_t *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="198" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a8cb4a06888dca57cabf179bf844b573e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::unset_esram_layout</definition>
        <argsstring>()</argsstring>
        <name>unset_esram_layout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="199" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a07b55b9650e60a0f4dc0677ca6d81b4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::reset_esram_layout</definition>
        <argsstring>()</argsstring>
        <name>reset_esram_layout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="200" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a2243ea272c49878a18609df55179e05b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::prefetch_movable_textures</definition>
        <argsstring>()</argsstring>
        <name>prefetch_movable_textures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="201" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="dag__driver_8h_1a7f93353b9624472411c3d9b5a7dcbae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::writeback_movable_textures</definition>
        <argsstring>()</argsstring>
        <name>writeback_movable_textures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" line="202" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_driver.h" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1af4072a2cceac5995f5388c7a22fcc1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::settm</definition>
        <argsstring>(int which, const Matrix44 *tm)</argsstring>
        <name>settm</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const Matrix44 *</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a Matrix44 object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation matrix is set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="23" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a673aabd2c490c197722dcadf8ec1f488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::settm</definition>
        <argsstring>(int which, const TMatrix &amp;tm)</argsstring>
        <name>settm</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const TMatrix &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a TMatrix object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation matrix is set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="32" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a292268fd3bca69e7c8a3c015d41bbece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::settm</definition>
        <argsstring>(int which, const mat44f &amp;tm)</argsstring>
        <name>settm</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const mat44f &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The output mat44f object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation matrix is set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="41" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a65183d3b8ddd93cf9c90410150849725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::gettm</definition>
        <argsstring>(int which, Matrix44 *out_tm)</argsstring>
        <name>gettm</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>Matrix44 *</type>
          <declname>out_tm</declname>
        </param>
        <briefdescription>
<para>Get the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000010"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a Matrix44 object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation matrix is retrieved successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="52" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a753de7137efe4815dfe733f259939fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::gettm</definition>
        <argsstring>(int which, TMatrix &amp;out_tm)</argsstring>
        <name>gettm</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>TMatrix &amp;</type>
          <declname>out_tm</declname>
        </param>
        <briefdescription>
<para>Get the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a TMatrix object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the transformation matrix is retrieved successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="63" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a5c501a5c13ce5250256aa427ee437ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::gettm</definition>
        <argsstring>(int which, mat44f &amp;out_tm)</argsstring>
        <name>gettm</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <param>
          <type>mat44f &amp;</type>
          <declname>out_tm</declname>
        </param>
        <briefdescription>
<para>Get the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The output mat44f object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="73" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1aa8c67b68bd190f6cc79639260d21d992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const mat44f &amp;</type>
        <definition>const mat44f&amp; d3d::gettm_cref</definition>
        <argsstring>(int which)</argsstring>
        <name>gettm_cref</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Get the constant reference to the transformation matrix for the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the transformation matrix. One of TM_XXX enum. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The constant reference to the transformation matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="83" column="14" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="83" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a84f7ca4a4b476bb7514cdbc3e5b006f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::getm2vtm</definition>
        <argsstring>(TMatrix &amp;out_m2v)</argsstring>
        <name>getm2vtm</name>
        <param>
          <type>TMatrix &amp;</type>
          <declname>out_m2v</declname>
        </param>
        <briefdescription>
<para>Get the model to view matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_m2v</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a TMatrix object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="92" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1ae994d9ffbc69f1173d41f9e895aff55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::getglobtm</definition>
        <argsstring>(Matrix44 &amp;out)</argsstring>
        <name>getglobtm</name>
        <param>
          <type>Matrix44 &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the current globtm matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Matrix44 object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="101" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a98b0466baa1794ce99fea2feaea16f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::setglobtm</definition>
        <argsstring>(Matrix44 &amp;globtm)</argsstring>
        <name>setglobtm</name>
        <param>
          <type>Matrix44 &amp;</type>
          <declname>globtm</declname>
        </param>
        <briefdescription>
<para>Set the custom globtm matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>globtm</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Matrix44 object representing the custom globtm matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="108" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a0c08cfdf31217c419b2bdb8311dbc60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::getglobtm</definition>
        <argsstring>(mat44f &amp;out)</argsstring>
        <name>getglobtm</name>
        <param>
          <type>mat44f &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the current globtm matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000016"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a mat44f object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="117" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1ad7d37a3c61518c3595a65909fdd67e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::setglobtm</definition>
        <argsstring>(const mat44f &amp;globtm)</argsstring>
        <name>setglobtm</name>
        <param>
          <type>const mat44f &amp;</type>
          <declname>globtm</declname>
        </param>
        <briefdescription>
<para>Set the custom globtm matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>globtm</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a mat44f object representing the custom globtm matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="124" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1ac05952d66d795ed0eb567c51018d2cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setpersp</definition>
        <argsstring>(const Driver3dPerspective &amp;p, TMatrix4 *proj_tm=nullptr)</argsstring>
        <name>setpersp</name>
        <param>
          <type>const <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>TMatrix4 *</type>
          <declname>proj_tm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Calculate and set the perspective matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object representing the perspective parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proj_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a TMatrix4 object to store the perspective matrix. Optional. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the perspective matrix is calculated and set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="133" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1ae329e546e7635ff77e65b4c2ce39301b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::getpersp</definition>
        <argsstring>(Driver3dPerspective &amp;p)</argsstring>
        <name>getpersp</name>
        <param>
          <type><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Get the last values set by setpersp(). </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000017"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the last values are retrieved successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="143" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1abe023d441e457494773cb2328cf90c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::validatepersp</definition>
        <argsstring>(const Driver3dPerspective &amp;p)</argsstring>
        <name>validatepersp</name>
        <param>
          <type>const <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Check if the given perspective parameters are valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object representing the perspective parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the perspective parameters are valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="151" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1aa2d9f17dd49100f45964e03fe115bd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::calcproj</definition>
        <argsstring>(const Driver3dPerspective &amp;p, mat44f &amp;proj_tm)</argsstring>
        <name>calcproj</name>
        <param>
          <type>const <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>mat44f &amp;</type>
          <declname>proj_tm</declname>
        </param>
        <briefdescription>
<para>Calculate the perspective matrix without setting it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object representing the perspective parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proj_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a mat44f object to store the perspective matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the perspective matrix is calculated successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="160" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1aa8f9b7e00678fb2bc6efafcd203d1fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::calcproj</definition>
        <argsstring>(const Driver3dPerspective &amp;p, TMatrix4 &amp;proj_tm)</argsstring>
        <name>calcproj</name>
        <param>
          <type>const <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>TMatrix4 &amp;</type>
          <declname>proj_tm</declname>
        </param>
        <briefdescription>
<para>Calculate the perspective matrix without setting it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object representing the perspective parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proj_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a TMatrix4 object to store the perspective matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the perspective matrix is calculated successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="169" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1aa70dc096983e0bfd4250d9109722f897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::calcglobtm</definition>
        <argsstring>(const mat44f &amp;view_tm, const mat44f &amp;proj_tm, mat44f &amp;result)</argsstring>
        <name>calcglobtm</name>
        <param>
          <type>const mat44f &amp;</type>
          <declname>view_tm</declname>
        </param>
        <param>
          <type>const mat44f &amp;</type>
          <declname>proj_tm</declname>
        </param>
        <param>
          <type>mat44f &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate the globtm matrix without setting it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>view_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The view matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proj_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The perspective matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a mat44f object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="178" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1afc112df52a6b69fb6402a0663e3872d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::calcglobtm</definition>
        <argsstring>(const mat44f &amp;view_tm, const Driver3dPerspective &amp;persp, mat44f &amp;result)</argsstring>
        <name>calcglobtm</name>
        <param>
          <type>const mat44f &amp;</type>
          <declname>view_tm</declname>
        </param>
        <param>
          <type>const <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>persp</declname>
        </param>
        <param>
          <type>mat44f &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate the globtm matrix without setting it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>view_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The view matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persp</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object representing the perspective parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a mat44f object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="187" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a961cc594e4eb4848ff8dbbbbc4815286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::calcglobtm</definition>
        <argsstring>(const TMatrix &amp;view_tm, const TMatrix4 &amp;proj_tm, TMatrix4 &amp;result)</argsstring>
        <name>calcglobtm</name>
        <param>
          <type>const TMatrix &amp;</type>
          <declname>view_tm</declname>
        </param>
        <param>
          <type>const TMatrix4 &amp;</type>
          <declname>proj_tm</declname>
        </param>
        <param>
          <type>TMatrix4 &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate the globtm matrix without setting it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>view_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The view matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proj_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The perspective matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a TMatrix4 object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="196" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__matrices_and_perspective_8h_1a0d6c6a6667660ed4b72de6ee3d173c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::calcglobtm</definition>
        <argsstring>(const TMatrix &amp;view_tm, const Driver3dPerspective &amp;persp, TMatrix4 &amp;result)</argsstring>
        <name>calcglobtm</name>
        <param>
          <type>const TMatrix &amp;</type>
          <declname>view_tm</declname>
        </param>
        <param>
          <type>const <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> &amp;</type>
          <declname>persp</declname>
        </param>
        <param>
          <type>TMatrix4 &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate the globtm matrix without setting it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>view_tm</parametername>
</parameternamelist>
<parameterdescription>
<para>The view matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persp</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref> object representing the perspective parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a TMatrix4 object to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" line="205" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_matricesAndPerspective.h" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__view_scissor_8h_1a7ad414f5859b37580579ef1946d31334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setscissor</definition>
        <argsstring>(int x, int y, int w, int h)</argsstring>
        <name>setscissor</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Set scissor for the current render target. Part of the render target that is outside the scissor rectangle is not rendered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>- left corner of the scissor rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>- top corner of the scissor rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>- width of the scissor rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>- height of the scissor rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the scissor rectangle was set successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" line="23" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__view_scissor_8h_1ae2c27091fc076cda7a8586c18505951c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setscissors</definition>
        <argsstring>(dag::ConstSpan&lt; ScissorRect &gt; scissorRects)</argsstring>
        <name>setscissors</name>
        <param>
          <type>dag::ConstSpan&lt; <ref refid="struct_scissor_rect" kindref="compound">ScissorRect</ref> &gt;</type>
          <declname>scissorRects</declname>
        </param>
        <briefdescription>
<para>Set scissor for the current set of render targets. Part of the render target that is outside the scissor rectangle is not rendered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scissorRects</parametername>
</parameternamelist>
<parameterdescription>
<para>- array of scissor rectangles. Should be the same size as the number of render targets. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the scissor rectangles were set successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" line="32" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__view_scissor_8h_1acbfd10bda2e494a5d1b15647112c897d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setview</definition>
        <argsstring>(int x, int y, int w, int h, float minz, float maxz)</argsstring>
        <name>setview</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float</type>
          <declname>minz</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxz</declname>
        </param>
        <briefdescription>
<para>Set view for the current render target. Part of the render target that is outside the view rectangle is not rendered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>- left corner of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>- top corner of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>- width of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>- height of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minz</parametername>
</parameternamelist>
<parameterdescription>
<para>- minimum depth value of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxz</parametername>
</parameternamelist>
<parameterdescription>
<para>- maximum depth value of the view rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the view rectangle was set successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" line="45" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__view_scissor_8h_1a28365ec19385981fe247ee45f3c50461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setviews</definition>
        <argsstring>(dag::ConstSpan&lt; Viewport &gt; viewports)</argsstring>
        <name>setviews</name>
        <param>
          <type>dag::ConstSpan&lt; <ref refid="struct_viewport" kindref="compound">Viewport</ref> &gt;</type>
          <declname>viewports</declname>
        </param>
        <briefdescription>
<para>Set view for the current set of render targets. Part of the render target that is outside the view rectangle is not rendered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>viewports</parametername>
</parameternamelist>
<parameterdescription>
<para>- array of view rectangles. Should be the same size as the number of render targets. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the view rectangles were set successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" line="53" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__view_scissor_8h_1a5a66dc48dfc93a9b2f9e42019072bd5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::getview</definition>
        <argsstring>(int &amp;x, int &amp;y, int &amp;w, int &amp;h, float &amp;minz, float &amp;maxz)</argsstring>
        <name>getview</name>
        <param>
          <type>int &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>minz</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>maxz</declname>
        </param>
        <briefdescription>
<para>Get view for the current render target. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000018"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Don&apos;t use it since this method relies on the global state.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>- left corner of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>- top corner of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>- width of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>- height of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minz</parametername>
</parameternamelist>
<parameterdescription>
<para>- minimum depth value of the view rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxz</parametername>
</parameternamelist>
<parameterdescription>
<para>- maximum depth value of the view rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the view rectangle was retrieved successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" line="68" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_viewScissor.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__variable_rate_shading_8h_1adada975ddd08d04d15502af1ddab9346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::set_variable_rate_shading</definition>
        <argsstring>(unsigned rate_x, unsigned rate_y, VariableRateShadingCombiner vertex_combiner=VariableRateShadingCombiner::VRS_PASSTHROUGH, VariableRateShadingCombiner pixel_combiner=VariableRateShadingCombiner::VRS_PASSTHROUGH)</argsstring>
        <name>set_variable_rate_shading</name>
        <param>
          <type>unsigned</type>
          <declname>rate_x</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>rate_y</declname>
        </param>
        <param>
          <type>VariableRateShadingCombiner</type>
          <declname>vertex_combiner</declname>
          <defval>VariableRateShadingCombiner::VRS_PASSTHROUGH</defval>
        </param>
        <param>
          <type>VariableRateShadingCombiner</type>
          <declname>pixel_combiner</declname>
          <defval>VariableRateShadingCombiner::VRS_PASSTHROUGH</defval>
        </param>
        <briefdescription>
<para>Sets variable rate shading setup for next draw calls. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Rates (<computeroutput>rate_x</computeroutput>, <computeroutput>rate_y</computeroutput>) of 1 by 4 or 4 by 1 are invalid.</para>
</simplesect>
<simplesect kind="note"><para>Depth/Stencil values are always computed at full rate and so shaders that modify depth value output may interfere with the <computeroutput>pixel_combiner</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate_x</parametername>
<parametername>rate_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant rates for the next draw calls, those are supported by all VRS capable devices. Valid values for both are 1, 2 and with the corresponding feature cap 4. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertex_combiner</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode in which the constant rate of <computeroutput>rate_x</computeroutput> and <computeroutput>rate_y</computeroutput> is combined with a possible vertex/geometry shader rate output. For shader outputs see SV_ShadingRate, note that the provoking vertex or the per primitive value is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_combiner</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode in which the result of &apos;vertex_combiner&apos; is combined with the rate of the sampling rate texture set by set_variable_rate_shading_texture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_variableRateShading.h" line="33" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_variableRateShading.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__variable_rate_shading_8h_1a05eefe81f1729532e723ccf254c8c970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::set_variable_rate_shading_texture</definition>
        <argsstring>(BaseTexture *rate_texture=nullptr)</argsstring>
        <name>set_variable_rate_shading_texture</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>rate_texture</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Sets the variable rate shading texture for the next draw calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate_texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to use as a shading rate source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Note that when you start to modify the used texture, you should reset the used shading rate texture to null to ensure that on next use as a shading rate source, the texture is in a state the device can use. <simplesect kind="note"><para>It is invalid to call this when <ref refid="struct_device_driver_capabilities_base_1aaf2ce88f773e67be7d02c2f7ccf2b70b" kindref="member">DeviceDriverCapabilities::hasVariableRateShadingTexture</ref> feature is not supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_variableRateShading.h" line="47" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_variableRateShading.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__dispatch_mesh_8h_1aef525d167f3cd65c8c30328c5c8e6e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::dispatch_mesh</definition>
        <argsstring>(uint32_t thread_group_x, uint32_t thread_group_y, uint32_t thread_group_z)</argsstring>
        <name>dispatch_mesh</name>
        <param>
          <type>uint32_t</type>
          <declname>thread_group_x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>thread_group_y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>thread_group_z</declname>
        </param>
        <briefdescription>
<para>Dispatches a mesh shader with the specified thread group dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para>Max value for each direction is 64k, product of all dimensions can not exceed 2^22</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_group_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of thread groups in the X direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_group_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of thread groups in the Y direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_group_z</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of thread groups in the Z direction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatchMesh.h" line="22" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatchMesh.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__dispatch_mesh_8h_1aadaf7fd506af03c270a3d311e8385f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::dispatch_mesh_indirect</definition>
        <argsstring>(Sbuffer *args, uint32_t dispatch_count, uint32_t stride_bytes, uint32_t byte_offset=0)</argsstring>
        <name>dispatch_mesh_indirect</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dispatch_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Dispatches a mesh shader indirectly using the provided arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the dispatch arguments. Buffer should contain structures of the following layout: struct DispatchArgs { uint32_t thread_group_x; uint32_t thread_group_y; uint32_t thread_group_z; }; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dispatch_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of dispatches to execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride between dispatch arguments in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the buffer where the dispatch arguments start (default = 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatchMesh.h" line="38" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatchMesh.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__dispatch_mesh_8h_1a883bfe96fef9d567ed0be6bae31cd2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::dispatch_mesh_indirect_count</definition>
        <argsstring>(Sbuffer *args, uint32_t args_stride_bytes, uint32_t args_byte_offset, Sbuffer *count, uint32_t count_byte_offset, uint32_t max_count)</argsstring>
        <name>dispatch_mesh_indirect_count</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>args_stride_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>args_byte_offset</declname>
        </param>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count_byte_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_count</declname>
        </param>
        <briefdescription>
<para>Dispatches a mesh shader indirectly using the provided arguments and a count buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Variant of dispatch_mesh_indirect where &apos;dispatch_count&apos; is read by the GPU from &apos;count&apos; buffer at &apos;count_offset&apos; (as uint32_t), this value can not exceed &apos;max_count&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the dispatch arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_stride_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride between dispatch arguments in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the buffer where the dispatch arguments start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the dispatch count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count_byte_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the count buffer where the dispatch count starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value that the dispatch count can have. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatchMesh.h" line="53" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_dispatchMesh.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__capture_8h_1a26bcc646ace57dc0ad7aa220c011364b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::start_capture</definition>
        <argsstring>(const char *name, const char *savepath)</argsstring>
        <name>start_capture</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>savepath</declname>
        </param>
        <briefdescription>
<para>Starts the capture process. All previous outstanding commands will be flushed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the capture. This might show up in the capture tool or be used in the filename depending on platform and the capture tool used. nullptr is not allowed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>savepath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path where the captured file will be saved. Not all capture tools respect this. nullptr means default path is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_capture.h" line="19" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_capture.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__capture_8h_1a2f6be69b37b90207bdc2efd72b988151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::stop_capture</definition>
        <argsstring>()</argsstring>
        <name>stop_capture</name>
        <briefdescription>
<para>Stops the ongoing capture process. </para>
        </briefdescription>
        <detaileddescription>
<para>This function halts any active capture operation that is currently in progress. Commands made since the last call to start_capture() will be flushed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_capture.h" line="27" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_capture.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1afb647ba2eb641e33f949eeb6f1d871e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::guess_gpu_vendor</definition>
        <argsstring>(String *out_gpu_desc=NULL, uint32_t *out_drv_ver=NULL, DagorDateTime *out_drv_date=NULL, uint32_t *device_id=nullptr)</argsstring>
        <name>guess_gpu_vendor</name>
        <param>
          <type>String *</type>
          <declname>out_gpu_desc</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_drv_ver</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>DagorDateTime *</type>
          <declname>out_drv_date</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>device_id</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Guesses and returns the GPU vendor ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_gpu_desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the GPU description </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_drv_ver</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the driver version </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_drv_date</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the driver date </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the device ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The GPU vendor ID for enum D3D_VENDOR_... </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="141" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a5bab7427d5bbf33c95bc0a4cfcccfd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DagorDateTime</type>
        <definition>DagorDateTime d3d::get_gpu_driver_date</definition>
        <argsstring>(int vendor)</argsstring>
        <name>get_gpu_driver_date</name>
        <param>
          <type>int</type>
          <declname>vendor</declname>
        </param>
        <briefdescription>
<para>Gets the driver date for the GPU vendor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vendor</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU vendor ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The driver date for the GPU vendor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="149" column="15" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="149" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1ae63838606341034873324244d9d71e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned d3d::get_dedicated_gpu_memory_size_kb</definition>
        <argsstring>()</argsstring>
        <name>get_dedicated_gpu_memory_size_kb</name>
        <briefdescription>
<para>Determines and returns the size of the dedicated GPU memory in KB. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the dedicated GPU memory in KB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="155" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="155" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a04c24178edc3e0c1c08755dc09b77de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned d3d::get_free_dedicated_gpu_memory_size_kb</definition>
        <argsstring>()</argsstring>
        <name>get_free_dedicated_gpu_memory_size_kb</name>
        <briefdescription>
<para>Determines and returns the size of the free dedicated GPU memory in KB. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the free dedicated GPU memory in KB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="161" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="161" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1ac6a266cd5cc54fc658a1ed7d1013f2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_current_gpu_memory_kb</definition>
        <argsstring>(uint32_t *dedicated_total, uint32_t *dedicated_free)</argsstring>
        <name>get_current_gpu_memory_kb</name>
        <param>
          <type>uint32_t *</type>
          <declname>dedicated_total</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dedicated_free</declname>
        </param>
        <briefdescription>
<para>Gets the current GPU memory during the game (supports only Nvidia GPUs). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dedicated_total</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total dedicated GPU memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dedicated_free</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the free dedicated GPU memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="168" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a6b5adf1b8beef212655c6871a43889a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::get_gpu_freq</definition>
        <argsstring>(String &amp;out_freq)</argsstring>
        <name>get_gpu_freq</name>
        <param>
          <type>String &amp;</type>
          <declname>out_freq</declname>
        </param>
        <briefdescription>
<para>Gets the GPU frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>String to store the GPU frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the GPU frequency was successfully retrieved, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>This function works only for Nvidia GPUs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="176" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1af8aba3fbbe0f22e6edd1b7c623e8bd52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::get_gpu_temperature</definition>
        <argsstring>()</argsstring>
        <name>get_gpu_temperature</name>
        <briefdescription>
<para>Gets the GPU temperature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The GPU temperature </para>
</simplesect>
<simplesect kind="note"><para>This function works only for Nvidia GPUs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="183" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="183" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a529097a5c69e0c91d60782e134b8abe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_video_vendor_str</definition>
        <argsstring>(String &amp;out_str)</argsstring>
        <name>get_video_vendor_str</name>
        <param>
          <type>String &amp;</type>
          <declname>out_str</declname>
        </param>
        <briefdescription>
<para>Gets the video vendor string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to store the video vendor string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="189" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a2f75542849c38587ca473e6eb7846ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float d3d::get_display_scale</definition>
        <argsstring>()</argsstring>
        <name>get_display_scale</name>
        <briefdescription>
<para>Gets the display scale. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The display scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="195" column="7" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="195" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a46605b89457725fff67d81c99b65d806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::disable_sli</definition>
        <argsstring>()</argsstring>
        <name>disable_sli</name>
        <briefdescription>
<para>Disables SLI settings for the profile. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000014"><xreftitle>Todo</xreftitle><xrefdescription><para>Remove. We don&apos;t support SLI anymore </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="201" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="201" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a5034d7807b89ba81b11bb22e5272b8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::get_driver_name</definition>
        <argsstring>()</argsstring>
        <name>get_driver_name</name>
        <briefdescription>
<para>Gets the driver name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The driver name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="207" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="207" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a68e158a74869106f5e0d9196f37ecc44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_driver_code" kindref="compound">DriverCode</ref></type>
        <definition>DriverCode d3d::get_driver_code</definition>
        <argsstring>()</argsstring>
        <name>get_driver_code</name>
        <briefdescription>
<para>Gets the driver code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The driver code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="224" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="224" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1ad8d6d2a2d84da0378951a7c7cb8bc230" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool d3d::is_stub_driver</definition>
        <argsstring>()</argsstring>
        <name>is_stub_driver</name>
        <briefdescription>
<para>Checks if the d3d-stub driver is used. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the d3d-stub driver is used, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="231" column="20" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1ae3edac783625344a307d1332c548ddd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::get_device_driver_version</definition>
        <argsstring>()</argsstring>
        <name>get_device_driver_version</name>
        <briefdescription>
<para>Gets the device driver version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The device driver version </para>
</simplesect>
<simplesect kind="note"><para>Work only for Vulkan. On other platforms returns &quot;1.0&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="238" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="238" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a4bc42172783719718a0fdfb23340ba1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::get_device_name</definition>
        <argsstring>()</argsstring>
        <name>get_device_name</name>
        <briefdescription>
<para>Gets the device name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The device name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="244" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="244" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a1f0dd13f5310b20f32e045bb3cfe85f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* d3d::get_last_error</definition>
        <argsstring>()</argsstring>
        <name>get_last_error</name>
        <briefdescription>
<para>Gets the last error message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last error message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="250" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="250" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a4e626e71a4181517c8a0c2376456a6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t d3d::get_last_error_code</definition>
        <argsstring>()</argsstring>
        <name>get_last_error_code</name>
        <briefdescription>
<para>Gets the last error code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="256" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="256" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a04054b402101416cf3fbd55de0529d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* d3d::get_device</definition>
        <argsstring>()</argsstring>
        <name>get_device</name>
        <briefdescription>
<para>Gets the raw pointer to the device interface (implementation and platform specific). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The raw pointer to the device interface </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="262" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="262" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1ac1623a0439d5fba235eeb2d6c852de93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* d3d::get_context</definition>
        <argsstring>()</argsstring>
        <name>get_context</name>
        <briefdescription>
<para>Gets the raw pointer to the device context (implementation and platform specific). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The raw pointer to the device context </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="268" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="268" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a2bd9fa4ac4aa9f3c4fa51bf5c53ebd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref> &amp;</type>
        <definition>const Driver3dDesc&amp; d3d::get_driver_desc</definition>
        <argsstring>()</argsstring>
        <name>get_driver_desc</name>
        <briefdescription>
<para>Gets the driver description. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The driver description </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="274" column="20" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="274" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a08f6ae41faad34082ea4333463861403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::is_in_device_reset_now</definition>
        <argsstring>()</argsstring>
        <name>is_in_device_reset_now</name>
        <briefdescription>
<para>Checks if the device is in device reset or being reset. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the device is in device reset or being reset, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="280" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="280" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1a76601ecfcb78e566326c4e233a9828ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::is_window_occluded</definition>
        <argsstring>()</argsstring>
        <name>is_window_occluded</name>
        <briefdescription>
<para>Checks if the game rendering window is completely occluded. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the game rendering window is completely occluded, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="286" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="286" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__info_8h_1ac648d85b061093c02270e382100668ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::should_use_compute_for_image_processing</definition>
        <argsstring>(std::initializer_list&lt; unsigned &gt; formats)</argsstring>
        <name>should_use_compute_for_image_processing</name>
        <param>
          <type>std::initializer_list&lt; unsigned &gt;</type>
          <declname>formats</declname>
        </param>
        <briefdescription>
<para>Checks if compute commands should be preferred for image processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>formats</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of image formats </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if compute commands should be preferred, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>Implemented only for DX11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" line="294" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_info.h" declline="294" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__sampler_8h_1ae852591d5ab574238949dfc13e40848d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SamplerHandle</type>
        <definition>SamplerHandle d3d::request_sampler</definition>
        <argsstring>(const SamplerInfo &amp;sampler_info)</argsstring>
        <name>request_sampler</name>
        <param>
          <type>const <ref refid="structd3d_1_1_sampler_info" kindref="compound">SamplerInfo</ref> &amp;</type>
          <declname>sampler_info</declname>
        </param>
        <briefdescription>
<para>Request a sampler handle with the given sampler info. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a sampler, when necessary. Identical infos should yield identical handles. This call is thread-safe and does not require external synchronization. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampler_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The information needed to create the sampler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SamplerHandle The handle to the sampler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" line="135" column="15" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" declline="135" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="dag__sampler_8h_1a46f411ec180adee30d74784ee27fb9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::set_sampler</definition>
        <argsstring>(unsigned shader_stage, unsigned slot, SamplerHandle sampler)</argsstring>
        <name>set_sampler</name>
        <param>
          <type>unsigned</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>SamplerHandle</type>
          <declname>sampler</declname>
        </param>
        <briefdescription>
<para>Binds given sampler to the slot. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is not thread-safe, requires global gpu lock to be held</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage to bind the sampler to. One of STAGE_XXX enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot to bind the sampler to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampler</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the sampler to be bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" line="146" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_sampler.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a8c61028441259d53c73dc90d57b0b6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::check_texformat</definition>
        <argsstring>(int cflg)</argsstring>
        <name>check_texformat</name>
        <param>
          <type>int</type>
          <declname>cflg</declname>
        </param>
        <briefdescription>
<para>Check whether the specified texture format is available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cflg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture format to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns false if a texture of the specified format cannot be created, otherwise returns true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="19" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1aefabbad9cd546d9409d5bca001e44344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int d3d::get_max_sample_count</definition>
        <argsstring>(int cflg)</argsstring>
        <name>get_max_sample_count</name>
        <param>
          <type>int</type>
          <declname>cflg</declname>
        </param>
        <briefdescription>
<para>Get the maximum sample count for the given texture format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cflg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum sample count for the given texture format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="26" column="5" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1aed34f3fb1beb1552fdbcd16d41f1d7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned d3d::get_texformat_usage</definition>
        <argsstring>(int cflg, int restype=RES3D_TEX)</argsstring>
        <name>get_texformat_usage</name>
        <param>
          <type>int</type>
          <declname>cflg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>restype</declname>
          <defval>RES3D_TEX</defval>
        </param>
        <briefdescription>
<para>Get the texture format usage for the given texture format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cflg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>restype</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource type (default value is RES3D_TEX). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The texture format usage. One of the USAGE_XXX flags. </para>
</simplesect>
<xrefsect id="todo_1_todo000015"><xreftitle>Todo</xreftitle><xrefdescription><para>Use enum class as a returned type. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="35" column="10" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a11442e47eb3c1cd4541019b8c4dfb10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::issame_texformat</definition>
        <argsstring>(int cflg1, int cflg2)</argsstring>
        <name>issame_texformat</name>
        <param>
          <type>int</type>
          <declname>cflg1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cflg2</declname>
        </param>
        <briefdescription>
<para>Check whether two texture creation flags result in the same format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cflg1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first texture creation flag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cflg2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second texture creation flag. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the two texture creation flags result in the same format, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="43" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a72451b65a81d37c1643961a00a532865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::check_cubetexformat</definition>
        <argsstring>(int cflg)</argsstring>
        <name>check_cubetexformat</name>
        <param>
          <type>int</type>
          <declname>cflg</declname>
        </param>
        <briefdescription>
<para>Check whether the specified cube texture format is available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cflg</parametername>
</parameternamelist>
<parameterdescription>
<para>The cube texture format to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns false if a cube texture of the specified format cannot be created, otherwise returns true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="50" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a27615e6293566df34fd0726f55ba81d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::check_voltexformat</definition>
        <argsstring>(int cflg)</argsstring>
        <name>check_voltexformat</name>
        <param>
          <type>int</type>
          <declname>cflg</declname>
        </param>
        <briefdescription>
<para>Check whether the specified volume texture format is available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cflg</parametername>
</parameternamelist>
<parameterdescription>
<para>The volume texture format to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns false if a volume texture of the specified format cannot be created, otherwise returns true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="57" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a6dd478aab2d2e7d42a6a5ef50a247493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::create_tex</definition>
        <argsstring>(TexImage32 *img, int w, int h, int flg, int levels, const char *stat_name=nullptr)</argsstring>
        <name>create_tex</name>
        <param>
          <type>TexImage32 *</type>
          <declname>img</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit image data. nullptr if there are no image data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="69" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="69" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a81913ee21c1048159b976169d1fa99bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::create_ddsx_tex</definition>
        <argsstring>(IGenLoad &amp;crd, int flg, int quality_id, int levels=0, const char *stat_name=nullptr)</argsstring>
        <name>create_ddsx_tex</name>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quality_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a texture from a DDSx stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crd</parametername>
</parameternamelist>
<parameterdescription>
<para>The DDSx stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quality_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The quality index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of loaded mipmaps (0=all, &gt;0=only first &apos;levels&apos; mipmaps). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="80" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1aff4edbb2e9912846ce038c84bb0ace15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::alloc_ddsx_tex</definition>
        <argsstring>(const ddsx::Header &amp;hdr, int flg, int quality_id, int levels=0, const char *stat_name=nullptr, int stub_tex_idx=-1)</argsstring>
        <name>alloc_ddsx_tex</name>
        <param>
          <type>const ddsx::Header &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quality_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stub_tex_idx</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Allocate a texture object using a DDSx header (not texture contents loaded at this time). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hdr</parametername>
</parameternamelist>
<parameterdescription>
<para>The DDSx header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quality_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The quality index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stub_tex_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the stub texture (default value is -1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the allocated texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="92" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="92" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1abdd051ff25f4f38f1fc72b77d3b3d264" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TexLoadRes</type>
        <definition>TexLoadRes d3d::load_ddsx_tex_contents</definition>
        <argsstring>(BaseTexture *t, const ddsx::Header &amp;hdr, IGenLoad &amp;crd, int q_id)</argsstring>
        <name>load_ddsx_tex_contents</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const ddsx::Header &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type>IGenLoad &amp;</type>
          <declname>crd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>q_id</declname>
        </param>
        <briefdescription>
<para>Load the texture content from a DDSx stream using a DDSx header for a previously allocated texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The previously allocated texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hdr</parametername>
</parameternamelist>
<parameterdescription>
<para>The DDSx header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crd</parametername>
</parameternamelist>
<parameterdescription>
<para>The DDSx stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The quality index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the texture content was successfully loaded, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="103" column="19" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a66af8e0bddd14527f5abd2ce79c928be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::create_cubetex</definition>
        <argsstring>(int size, int flg, int levels, const char *stat_name=nullptr)</argsstring>
        <name>create_cubetex</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a cubic texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the texture. (6 faces size x size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="116" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="116" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a0e0784cd8477b5879582f86ac921b76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::create_voltex</definition>
        <argsstring>(int w, int h, int d, int flg, int levels, const char *stat_name=nullptr)</argsstring>
        <name>create_voltex</name>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a volume texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="128" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="128" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1aa083d67f9369154e61f3538bd659642e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::create_array_tex</definition>
        <argsstring>(int w, int h, int d, int flg, int levels, const char *stat_name)</argsstring>
        <name>create_array_tex</name>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
        </param>
        <briefdescription>
<para>Create a texture2d array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of textures in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="140" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="140" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a67d425a9246a749d261557340d70346e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::create_cube_array_tex</definition>
        <argsstring>(int side, int d, int flg, int levels, const char *stat_name)</argsstring>
        <name>create_cube_array_tex</name>
        <param>
          <type>int</type>
          <declname>side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
        </param>
        <briefdescription>
<para>Create a cube array tex object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the texture. (6 faces size x size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of textures in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="151" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="151" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a47ccfee379082a389bc4b1db071fc331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::alias_tex</definition>
        <argsstring>(BaseTexture *baseTexture, TexImage32 *img, int w, int h, int flg, int levels, const char *stat_name=nullptr)</argsstring>
        <name>alias_tex</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>baseTexture</declname>
        </param>
        <param>
          <type>TexImage32 *</type>
          <declname>img</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a texture alias, a texture using the same memory as another texture but with a different format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseTexture</parametername>
</parameternamelist>
<parameterdescription>
<para>The base texture to alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit image data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture alias, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="164" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1ad29c9bdd177a96940fa8aba18a51927b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::alias_cubetex</definition>
        <argsstring>(BaseTexture *baseTexture, int size, int flg, int levels, const char *stat_name=nullptr)</argsstring>
        <name>alias_cubetex</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>baseTexture</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a cube texture alias, a texture using the same memory as another cube texture but with a different format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseTexture</parametername>
</parameternamelist>
<parameterdescription>
<para>The base cube texture to alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created cube texture alias, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="175" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="175" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1ad27ee3bf358d8d8bd76f54b115578385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::alias_voltex</definition>
        <argsstring>(BaseTexture *baseTexture, int w, int h, int d, int flg, int levels, const char *stat_name=nullptr)</argsstring>
        <name>alias_voltex</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>baseTexture</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create a volume texture alias, a texture using the same memory as another volume texture but with a different format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseTexture</parametername>
</parameternamelist>
<parameterdescription>
<para>The base volume texture to alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created volume texture alias, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="188" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="188" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a1ade31de3bb13fa092200f38441b9666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::alias_array_tex</definition>
        <argsstring>(BaseTexture *baseTexture, int w, int h, int d, int flg, int levels, const char *stat_name)</argsstring>
        <name>alias_array_tex</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>baseTexture</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
        </param>
        <briefdescription>
<para>Create a texture2d array alias, a texture using the same memory as another texture2d array but with a different format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseTexture</parametername>
</parameternamelist>
<parameterdescription>
<para>The base texture2d array to alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of textures in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created texture2d array alias, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="201" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="201" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1ad57d498da21e01a080903eceeddb9743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
        <definition>BaseTexture* d3d::alias_cube_array_tex</definition>
        <argsstring>(BaseTexture *baseTexture, int side, int d, int flg, int levels, const char *stat_name)</argsstring>
        <name>alias_cube_array_tex</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>baseTexture</declname>
        </param>
        <param>
          <type>int</type>
          <declname>side</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>stat_name</declname>
        </param>
        <briefdescription>
<para>Create a cube array texture alias, a texture using the same memory as another cube array texture but with a different format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseTexture</parametername>
</parameternamelist>
<parameterdescription>
<para>The base cube array texture to alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>The side of the cube texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of textures in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flg</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture creation flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of mipmap levels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture for statistics purposes (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created cube array texture alias, or nullptr on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="213" column="13" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="213" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a70758d8bfe3be2b39d4f6210798c2e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::stretch_rect</definition>
        <argsstring>(BaseTexture *src, BaseTexture *dst, RectInt *rsrc=nullptr, RectInt *rdst=nullptr)</argsstring>
        <name>stretch_rect</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>RectInt *</type>
          <declname>rsrc</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>RectInt *</type>
          <declname>rdst</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Stretch a rectangle from the source texture to the destination texture. </para>
        </briefdescription>
        <detaileddescription>
<para>Under the hood it is a call of CopySubresourceRegion if source and destination textures are the same type and their texel could be mapped one to one. Otherwise it is an execution of a shader that does the stretching.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsrc</parametername>
</parameternamelist>
<parameterdescription>
<para>The source rectangle (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rdst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination rectangle (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the stretch operation was successful, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="227" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="227" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a573366da808fa0d867c3eef805b0ca07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_texture_statistics</definition>
        <argsstring>(uint32_t *num_textures, uint64_t *total_mem, String *out_dump)</argsstring>
        <name>get_texture_statistics</name>
        <param>
          <type>uint32_t *</type>
          <declname>num_textures</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>total_mem</declname>
        </param>
        <param>
          <type>String *</type>
          <declname>out_dump</declname>
        </param>
        <briefdescription>
<para>Get the texture statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_textures</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of textures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total memory used by textures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dump</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the texture statistics dump. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="235" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1ac4c2f08017ddd15b0ea02232731e760a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_tex</definition>
        <argsstring>(unsigned shader_stage, unsigned slot, BaseTexture *tex, bool use_sampler=true)</argsstring>
        <name>set_tex</name>
        <param>
          <type>unsigned</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_sampler</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set a texture for a shader stage and slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader stage. One of the STAGE_XXX flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_sampler</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use the sampler (default value is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the texture was successfully set, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="245" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" declline="245" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1ac3b2c9bfbfac46572038d0788d9ac0a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::settex</definition>
        <argsstring>(int slot, BaseTexture *tex)</argsstring>
        <name>settex</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
<para>Set a texture for a pixel shader slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the texture was successfully set, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="253" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="dag__texture_8h_1a368ebe9f688034c936bc709f931daf29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::settex_vs</definition>
        <argsstring>(int slot, BaseTexture *tex)</argsstring>
        <name>settex_vs</name>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
<para>Set a texture for a vertex shader slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the texture was successfully set, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" line="261" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_texture.h" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="dag__rw_resource_8h_1ac20a0e2ce947c0b611010d4c9ee4e745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_rwtex</definition>
        <argsstring>(uint32_t shader_stage, uint32_t slot, BaseTexture *tex, uint32_t face, uint32_t mip_level, bool as_uint=false)</argsstring>
        <name>set_rwtex</name>
        <param>
          <type>uint32_t</type>
          <declname>shader_stage</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>face</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mip_level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>as_uint</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set the read/write (UAV) texture to slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>shader stage (VS, PS, CS) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>slot index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>texture to set as UAV resoruce </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face</parametername>
</parameternamelist>
<parameterdescription>
<para>face index for cubemaps, 3D textures and texture arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mip_level</parametername>
</parameternamelist>
<parameterdescription>
<para>mip level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>as_uint</parametername>
</parameternamelist>
<parameterdescription>
<para>if true then texture will be viewed as uint in UAV. The texture type should be 32-bit format. <ulink url="https://msdn.microsoft.com/en-us/library/windows/desktop/ff728749(v=vs.85).aspx">https://msdn.microsoft.com/en-us/library/windows/desktop/ff728749(v=vs.85).aspx</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" line="26" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__rw_resource_8h_1a1e47e5469c7963e139f711e2c79e7763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::clear_rwtexi</definition>
        <argsstring>(BaseTexture *tex, const uint32_t val[4], uint32_t face, uint32_t mip_level)</argsstring>
        <name>clear_rwtexi</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>val</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>face</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mip_level</declname>
        </param>
        <briefdescription>
<para>Clear UAV texture with integer values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>texture to clear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>clear value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face</parametername>
</parameternamelist>
<parameterdescription>
<para>face index for cubemaps, 3D textures and texture arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mip_level</parametername>
</parameternamelist>
<parameterdescription>
<para>mip level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" line="37" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__rw_resource_8h_1ab25156cb3df471de6a32afadc7228491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::clear_rwtexf</definition>
        <argsstring>(BaseTexture *tex, const float val[4], uint32_t face, uint32_t mip_level)</argsstring>
        <name>clear_rwtexf</name>
        <param>
          <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>val</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>face</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mip_level</declname>
        </param>
        <briefdescription>
<para>Clear UAV texture with float values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>texture to clear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>clear value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face</parametername>
</parameternamelist>
<parameterdescription>
<para>face index for cubemaps, 3D textures and texture arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mip_level</parametername>
</parameternamelist>
<parameterdescription>
<para>mip level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" line="48" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__rw_resource_8h_1a8bc38113cdb91a16c388c965569d1946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::clear_rwbufi</definition>
        <argsstring>(Sbuffer *buf, const uint32_t val[4])</argsstring>
        <name>clear_rwbufi</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>val</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Clear UAV buffer with integer values. </para>
        </briefdescription>
        <detaileddescription>
<para>4 components are required by DirectX API, so the buffer will be cleared with the same 4 dwords pattern.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to clear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>clear value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" line="59" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__rw_resource_8h_1a7d886f6708f71f107741758ceca2d981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::clear_rwbuff</definition>
        <argsstring>(Sbuffer *buf, const float val[4])</argsstring>
        <name>clear_rwbuff</name>
        <param>
          <type><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>val</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Clear UAV buffer with float values. </para>
        </briefdescription>
        <detaileddescription>
<para>4 components are required by DirectX API, so the buffer will be cleared with the same 4 dwords pattern.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to clear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>clear value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" line="70" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_rwResource.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a9e145d1b61d58e405ea63d9e2d335c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VDECL</type>
        <definition>VDECL d3d::get_program_vdecl</definition>
        <argsstring>(PROGRAM)</argsstring>
        <name>get_program_vdecl</name>
        <param>
          <type>PROGRAM</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="27" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="27" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a6bbf51c7bf7d8496b00fb55082399427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_vertex_shader</definition>
        <argsstring>(VPROG ps)</argsstring>
        <name>set_vertex_shader</name>
        <param>
          <type>VPROG</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="29" column="8" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="29" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a044591ff3151ce73516e88620f889fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_pixel_shader</definition>
        <argsstring>(FSHADER ps)</argsstring>
        <name>set_pixel_shader</name>
        <param>
          <type>FSHADER</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="30" column="8" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="30" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1af908ddca82916e5fccb59cd2ad52505b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPROG</type>
        <definition>VPROG d3d::create_vertex_shader_asm</definition>
        <argsstring>(const char *asm_text)</argsstring>
        <name>create_vertex_shader_asm</name>
        <param>
          <type>const char *</type>
          <declname>asm_text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="42" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="42" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a49ade36af878e6253fb5695e67816a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPROG</type>
        <definition>VPROG d3d::create_vertex_shader_dagor</definition>
        <argsstring>(const VPRTYPE *p, int n)</argsstring>
        <name>create_vertex_shader_dagor</name>
        <param>
          <type>const VPRTYPE *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="43" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="43" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a3f8588843c2cbe8959508c60cfb9d12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FSHADER</type>
        <definition>FSHADER d3d::create_pixel_shader_asm</definition>
        <argsstring>(const char *asm_text)</argsstring>
        <name>create_pixel_shader_asm</name>
        <param>
          <type>const char *</type>
          <declname>asm_text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="45" column="11" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="45" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a994ccb10e653497a1a211a6a626f9396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FSHADER</type>
        <definition>FSHADER d3d::create_pixel_shader_dagor</definition>
        <argsstring>(const FSHTYPE *p, int n)</argsstring>
        <name>create_pixel_shader_dagor</name>
        <param>
          <type>const FSHTYPE *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="46" column="11" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="46" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="dag__platform__pc_8h_1a0bcd4ac6c650505f630f1df613263920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::get_video_modes_list</definition>
        <argsstring>(Tab&lt; String &gt; &amp;list)</argsstring>
        <name>get_video_modes_list</name>
        <param>
          <type>Tab&lt; String &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>retrieve list of available display modes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" line="63" column="8" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_platform_pc.h" declline="63" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___render_pass_d3_d_1ga4d90bfe31385c2f6a059b20a2035b02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RenderPass *</type>
        <definition>RenderPass* d3d::create_render_pass</definition>
        <argsstring>(const RenderPassDesc &amp;rp_desc)</argsstring>
        <name>create_render_pass</name>
        <param>
          <type>const <ref refid="struct_render_pass_desc" kindref="compound">RenderPassDesc</ref> &amp;</type>
          <declname>rp_desc</declname>
        </param>
        <briefdescription>
<para>Creates render pass object. </para>
        </briefdescription>
        <detaileddescription>
<para>Render pass objects are intended to be created once (and ahead of time), used many times <simplesect kind="note"><para>No external sync required </para>
</simplesect>
<simplesect kind="warning"><para>Do not run per frame/realtime! </para>
</simplesect>
<simplesect kind="warning"><para>Avoid using at time sensitive places! </para>
</simplesect>
<simplesect kind="warning"><para>Will assert-fail if rp_desc.bindCount is 0 </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rp_desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of render pass to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to opaque RenderPass object, may be nullptr if description is invalid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" line="106" column="12" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" declline="106" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___render_pass_d3_d_1ga7d9a33d5eb0008a70925a63a0e6c8f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::delete_render_pass</definition>
        <argsstring>(RenderPass *rp)</argsstring>
        <name>delete_render_pass</name>
        <param>
          <type>RenderPass *</type>
          <declname>rp</declname>
        </param>
        <briefdescription>
<para>Deletes render pass object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Sync with usage is required (must not delete object that is in use in current CPU frame) </para>
</simplesect>
<simplesect kind="warning"><para>All usage to object becomes invalid right after method call </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be deleted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" line="111" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___render_pass_d3_d_1gaa4a6f280d5f8c0652a81bde072acd524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::begin_render_pass</definition>
        <argsstring>(RenderPass *rp, const RenderPassArea area, const RenderPassTarget *targets)</argsstring>
        <name>begin_render_pass</name>
        <param>
          <type>RenderPass *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>const <ref refid="struct_render_pass_area" kindref="compound">RenderPassArea</ref></type>
          <declname>area</declname>
        </param>
        <param>
          <type>const <ref refid="struct_render_pass_target" kindref="compound">RenderPassTarget</ref> *</type>
          <declname>targets</declname>
        </param>
        <briefdescription>
<para>Begins render pass rendering. </para>
        </briefdescription>
        <detaileddescription>
<para>After this command, viewport is reset to area supplied and subpass 0, described in render pass object, is started <simplesect kind="note"><para>Must be external synced (GPU lock required) </para>
</simplesect>
<simplesect kind="warning"><para>When inside pass, all other GPU execution methods aside of Draw* are prohibited! </para>
</simplesect>
<simplesect kind="warning"><para>Avoid writes/reads outside area, it is UB in general </para>
</simplesect>
<simplesect kind="warning"><para>Will assert-fail if other render pass is already in process </para>
</simplesect>
<simplesect kind="warning"><para>Backbuffer can&apos;t be used as target </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>Render pass resource to begin with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para>Rendering area restriction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of targets that will be used in rendering </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" line="124" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___render_pass_d3_d_1ga377ea5974efb7d1c02250abc4b64e400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::next_subpass</definition>
        <argsstring>()</argsstring>
        <name>next_subpass</name>
        <briefdescription>
<para>Advances to next subpass. </para>
        </briefdescription>
        <detaileddescription>
<para>Increases subpass number and executes necessary synchronization as well as binding, described for this subpass</para>
<para><ref refid="struct_viewport" kindref="compound">Viewport</ref> is reset to render area on every call <simplesect kind="note"><para>Must be external synced (GPU lock required) </para>
</simplesect>
<simplesect kind="warning"><para>Will assert-fail if there is no subpass to advance to </para>
</simplesect>
<simplesect kind="warning"><para>Will assert-fail if called outside of render pass </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" line="132" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___render_pass_d3_d_1ga053cea528c68defea3886ff83e537f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::end_render_pass</definition>
        <argsstring>()</argsstring>
        <name>end_render_pass</name>
        <briefdescription>
<para>Ends render pass. </para>
        </briefdescription>
        <detaileddescription>
<para>Processes store&amp;sync operations described in render pass</para>
<para>After this call, any non Draw operations are allowed and render targets are reset to backbuffer <simplesect kind="note"><para>Must be external synced (GPU lock required) </para>
</simplesect>
<simplesect kind="warning"><para>Will assert-fail if subpass is not final </para>
</simplesect>
<simplesect kind="warning"><para>Will assert-fail if called outside of render pass </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" line="139" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___render_pass_d3_d_1ga80a581f2c8f7194358104dcabeb2eaae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::allow_render_pass_target_load</definition>
        <argsstring>()</argsstring>
        <name>allow_render_pass_target_load</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When renderpass splits validation is enabled in Vulkan this command tells that we actually want to load previous contents of attached color targets or depth to render on top of it. Otherwise loading previous contents treated as renderpass split and the validation fails (we want to avoid RP splits cause of performance impact on TBDR). If it&apos;s known that the render target will be just fully redrawn (like in most postfx), it&apos;s better to use d3d::clearview(CLEAR_DISCARD, ...) instead of this command. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" line="150" column="13" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderPass.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1af3979afd349cd07e3679f0c22db37aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROGRAM</type>
        <definition>PROGRAM d3d::create_program</definition>
        <argsstring>(VPROG vprog, FSHADER fsh, VDECL vdecl, unsigned *strides=nullptr, unsigned streams=0)</argsstring>
        <name>create_program</name>
        <param>
          <type>VPROG</type>
          <declname>vprog</declname>
        </param>
        <param>
          <type>FSHADER</type>
          <declname>fsh</declname>
        </param>
        <param>
          <type>VDECL</type>
          <declname>vdecl</declname>
        </param>
        <param>
          <type>unsigned *</type>
          <declname>strides</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>unsigned</type>
          <declname>streams</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a program with a vertex shader, fragment shader, and vertex declaration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vprog</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex shader program. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsh</parametername>
</parameternamelist>
<parameterdescription>
<para>The fragment shader program. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vdecl</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex declaration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strides</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride values for each vertex stream (optional, default is 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streams</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertex streams (optional, default is 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created program.</para>
</simplesect>
If strides and streams are not set, they will be obtained from the vertex declaration. The program should be deleted externally using delete_program(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="25" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="25" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1a6a1a2076a8e27758770f427d559ed70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROGRAM</type>
        <definition>PROGRAM d3d::create_program</definition>
        <argsstring>(const uint32_t *vpr_native, const uint32_t *fsh_native, VDECL vdecl, unsigned *strides=nullptr, unsigned streams=0)</argsstring>
        <name>create_program</name>
        <param>
          <type>const uint32_t *</type>
          <declname>vpr_native</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>fsh_native</declname>
        </param>
        <param>
          <type>VDECL</type>
          <declname>vdecl</declname>
        </param>
        <param>
          <type>unsigned *</type>
          <declname>strides</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>unsigned</type>
          <declname>streams</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a program with native vertex shader and fragment shader code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vpr_native</parametername>
</parameternamelist>
<parameterdescription>
<para>The native code for the vertex shader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsh_native</parametername>
</parameternamelist>
<parameterdescription>
<para>The native code for the fragment shader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vdecl</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex declaration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strides</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride values for each vertex stream (optional, default is 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streams</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertex streams (optional, default is 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created program.</para>
</simplesect>
If strides and streams are not set, they will be obtained from the vertex declaration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="39" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="39" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1aeaa6c329e9ec21e6a2357e213904283b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROGRAM</type>
        <definition>PROGRAM d3d::create_program_cs</definition>
        <argsstring>(const uint32_t *cs_native, CSPreloaded preloaded)</argsstring>
        <name>create_program_cs</name>
        <param>
          <type>const uint32_t *</type>
          <declname>cs_native</declname>
        </param>
        <param>
          <type>CSPreloaded</type>
          <declname>preloaded</declname>
        </param>
        <briefdescription>
<para>Creates a compute shader program with native code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cs_native</parametername>
</parameternamelist>
<parameterdescription>
<para>The native code for the compute shader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preloaded</parametername>
</parameternamelist>
<parameterdescription>
<para>The preloaded data for the compute shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="49" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="49" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1a5f3678795cbb2cb2164551024184cbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_program</definition>
        <argsstring>(PROGRAM program)</argsstring>
        <name>set_program</name>
        <param>
          <type>PROGRAM</type>
          <declname>program</declname>
        </param>
        <briefdescription>
<para>Sets the program as the current program, including the pixel shader, vertex shader, and vertex declaration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the program was set successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="57" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1afa9fe256fa94777c940808fdd30f4236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::delete_program</definition>
        <argsstring>(PROGRAM program)</argsstring>
        <name>delete_program</name>
        <param>
          <type>PROGRAM</type>
          <declname>program</declname>
        </param>
        <briefdescription>
<para>Deletes a program, including the vertex shader and fragment shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to delete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The vertex declaration should be deleted independently. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="66" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1a7cc57c7aa6a2cad188a7355412c6bd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VPROG</type>
        <definition>VPROG d3d::create_vertex_shader</definition>
        <argsstring>(const uint32_t *native_code)</argsstring>
        <name>create_vertex_shader</name>
        <param>
          <type>const uint32_t *</type>
          <declname>native_code</declname>
        </param>
        <briefdescription>
<para>Creates a vertex shader with native code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>native_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The native code for the vertex shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created vertex shader. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="74" column="7" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1afcf1e5ec4134ae8d7250e8e836f8b422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::delete_vertex_shader</definition>
        <argsstring>(VPROG vs)</argsstring>
        <name>delete_vertex_shader</name>
        <param>
          <type>VPROG</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
<para>Deletes a vertex shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertex shader to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="81" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1a7c51988b882c376f39d4e9dd1e6ada63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FSHADER</type>
        <definition>FSHADER d3d::create_pixel_shader</definition>
        <argsstring>(const uint32_t *native_code)</argsstring>
        <name>create_pixel_shader</name>
        <param>
          <type>const uint32_t *</type>
          <declname>native_code</declname>
        </param>
        <briefdescription>
<para>Creates a pixel shader with native code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>native_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The native code for the pixel shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created pixel shader. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="89" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="89" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1ab91b1dc046a6a5d9139dc88b7c391b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::delete_pixel_shader</definition>
        <argsstring>(FSHADER ps)</argsstring>
        <name>delete_pixel_shader</name>
        <param>
          <type>FSHADER</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Deletes a pixel shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>The pixel shader to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="96" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__shader_8h_1ac53adf4e7211172229ff5c4c0fdf4872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PROGRAM</type>
        <definition>PROGRAM d3d::get_debug_program</definition>
        <argsstring>()</argsstring>
        <name>get_debug_program</name>
        <briefdescription>
<para>Gets the debug program. </para>
        </briefdescription>
        <detaileddescription>
<para>This program&apos;s bytecode is written in the source code of the driver, so the program is always available (if a driver supports this API). The debug program is used to draw debug stuff (vertex colored primitives).</para>
<para><simplesect kind="return"><para>The debug program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" line="106" column="9" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_shader.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1a55f4d4d0d4bd73efd083e7c05814b099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_blend_factor</definition>
        <argsstring>(E3DCOLOR color)</argsstring>
        <name>set_blend_factor</name>
        <param>
          <type>E3DCOLOR</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the blend factor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>blend factor to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="135" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1a930aaf843f11f2120640447487351c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setstencil</definition>
        <argsstring>(uint32_t ref)</argsstring>
        <name>setstencil</name>
        <param>
          <type>uint32_t</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Set the stencil reference value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>reference value to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="143" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1aa5b61419d1af9fbe03b9bf8fec0fc1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::setwire</definition>
        <argsstring>(bool in)</argsstring>
        <name>setwire</name>
        <param>
          <type>bool</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Set the wireframe mode. Works only in dev build. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable wireframe mode, false to disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="151" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1abb10954f6395f127f5f5dc08fe491415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_depth_bounds</definition>
        <argsstring>(float zmin, float zmax)</argsstring>
        <name>set_depth_bounds</name>
        <param>
          <type>float</type>
          <declname>zmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zmax</declname>
        </param>
        <briefdescription>
<para>Set the depth bounds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zmin</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum depth value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zmax</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum depth value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="160" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1a795f77f1ef8dd6e2d2c5c8f8321d96ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shaders::DriverRenderStateId</type>
        <definition>shaders::DriverRenderStateId d3d::create_render_state</definition>
        <argsstring>(const shaders::RenderState &amp;state)</argsstring>
        <name>create_render_state</name>
        <param>
          <type>const <ref refid="structshaders_1_1_render_state" kindref="compound">shaders::RenderState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Create a render state object in driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>parameters of the render state object to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shaders::DriverRenderStateId id of the created render state object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="168" column="30" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="168" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1adeee19f05937fa2c4d5c8a12bdd78078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool d3d::set_render_state</definition>
        <argsstring>(shaders::DriverRenderStateId state_id)</argsstring>
        <name>set_render_state</name>
        <param>
          <type>shaders::DriverRenderStateId</type>
          <declname>state_id</declname>
        </param>
        <briefdescription>
<para>Set the render state object in driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the render state object to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="176" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dag__render_states_8h_1a01059836b63021069459b0c308c22791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d3d::clear_render_states</definition>
        <argsstring>()</argsstring>
        <name>clear_render_states</name>
        <briefdescription>
<para>Remove all render state objects allocated in driver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" line="181" column="6" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_renderStates.h" declline="181" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_tiledResource.h" line="54" column="1"/>
  </compounddef>
</doxygen>
