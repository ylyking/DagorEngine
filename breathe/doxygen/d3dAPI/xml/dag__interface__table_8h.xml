<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dag__interface__table_8h" kind="file" language="C++">
    <compoundname>dag_interface_table.h</compoundname>
    <includes local="no">EASTL/initializer_list.h</includes>
    <includes local="no">generic/dag_span.h</includes>
    <includes local="no">generic/dag_tabFwd.h</includes>
    <includes local="no">math/dag_TMatrix4.h</includes>
    <includes refid="dag__consts__base_8h" local="no">drv/3d/dag_consts_base.h</includes>
    <includes refid="dag__sampler_handle_8h" local="no">drv/3d/dag_samplerHandle.h</includes>
    <includes refid="dag__barrier_8h" local="no">drv/3d/dag_barrier.h</includes>
    <includes refid="dag__consts_8h" local="no">drv/3d/dag_consts.h</includes>
    <includes refid="dag__resource_8h" local="no">drv/3d/dag_resource.h</includes>
    <includes refid="dag__render_state_id_8h" local="no">drv/3d/dag_renderStateId.h</includes>
    <includes refid="dag__shader_library_object_8h" local="no">drv/3d/dag_shaderLibraryObject.h</includes>
    <includes local="no">drv/3d/rayTrace/dag_drvRayTrace.h</includes>
    <includes local="yes">rayTrace/rayTrace3di.inl.h</includes>
    <incdepgraph>
      <node id="14">
        <label>drv/3d/dag_resource.h</label>
        <link refid="dag__resource_8h_source"/>
      </node>
      <node id="8">
        <label>util/dag_stdint.h</label>
      </node>
      <node id="6">
        <label>drv/3d/dag_consts_base.h</label>
        <link refid="dag__consts__base_8h_source"/>
      </node>
      <node id="9">
        <label>drv/3d/dag_barrier.h</label>
        <link refid="dag__barrier_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>generic/dag_span.h</label>
      </node>
      <node id="5">
        <label>math/dag_TMatrix4.h</label>
      </node>
      <node id="2">
        <label>EASTL/initializer_list.h</label>
      </node>
      <node id="10">
        <label>debug/dag_assert.h</label>
      </node>
      <node id="4">
        <label>generic/dag_tabFwd.h</label>
      </node>
      <node id="1">
        <label>/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h</label>
        <link refid="dag__interface__table_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>drv/3d/dag_renderStateId.h</label>
        <link refid="dag__render_state_id_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>drv/3d/dag_driverCode.h</label>
        <link refid="dag__driver_code_8h_source"/>
      </node>
      <node id="7">
        <label>drv/3d/dag_samplerHandle.h</label>
        <link refid="dag__sampler_handle_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>drv/3d/dag_consts.h</label>
        <link refid="dag__consts_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>util/dag_generationRefId.h</label>
      </node>
      <node id="20">
        <label>rayTrace/rayTrace3di.inl.h</label>
      </node>
      <node id="17">
        <label>drv/3d/dag_shaderLibraryObject.h</label>
        <link refid="dag__shader_library_object_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>drv/3d/rayTrace/dag_drvRayTrace.h</label>
      </node>
      <node id="18">
        <label>util/dag_inttypes.h</label>
      </node>
      <node id="13">
        <label>drv/3d/dag_shaderModelVersion.h</label>
        <link refid="dag__shader_model_version_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="struct_d3d_interface_table" prot="public">D3dInterfaceTable</innerclass>
    <innernamespace refid="namespaced3d">d3d</innernamespace>
    <innernamespace refid="namespaceddsx">ddsx</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dag__interface__table_8h_1a7f8a2e7770f595ec85ae968ce28e2c1f" prot="public" static="no">
        <type>TMatrix4</type>
        <definition>using Matrix44 =  TMatrix4</definition>
        <argsstring></argsstring>
        <name>Matrix44</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" line="31" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dag__interface__table_8h_1ac0ff089c2b5106c9e547da6511ef4b6d" prot="public" static="no">
        <type>unsigned uint32_t</type>
        <definition>using ResourceHeapCreateFlags =  unsigned uint32_t</definition>
        <argsstring></argsstring>
        <name>ResourceHeapCreateFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" line="62" column="1" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dag__interface__table_8h_1a37ee2859ee04a3f5c750a5b5e3684c1d" prot="public" static="no">
        <type><ref refid="class_base_texture" kindref="compound">BaseTexture</ref></type>
        <definition>typedef BaseTexture Texture</definition>
        <argsstring></argsstring>
        <name>Texture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" line="64" column="21" bodyfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dag__interface__table_8h_1a9f0f35dc4d7008b6f6a8ee34d251fd6d" prot="public" static="no" mutable="no">
        <type><ref refid="struct_d3d_interface_table" kindref="compound">D3dInterfaceTable</ref></type>
        <definition>D3dInterfaceTable d3di</definition>
        <argsstring></argsstring>
        <name>d3di</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" line="428" column="26" declfile="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h" declline="428" declcolumn="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dagor<sp/>Engine<sp/>6.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>Gaijin<sp/>Games<sp/>KFT.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EASTL/initializer_list.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_span.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;generic/dag_tabFwd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math/dag_TMatrix4.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_consts_base.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_samplerHandle.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_barrier.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_consts.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_resource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_renderStateId.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/dag_shaderLibraryObject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drv/3d/rayTrace/dag_drvRayTrace.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">D3dEventQuery;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">d3d</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>D3dEventQuery<sp/>EventQuery;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RenderPass;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SamplerInfo;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ResUpdateBuffer;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>d3d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Matrix44<sp/>=<sp/>TMatrix4;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">String;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_base_texture" kindref="compound">BaseTexture</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IGenLoad;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_d3d_resource" kindref="compound">D3dResource</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TexImage32;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RectInt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_driver3d_render_target" kindref="compound">Driver3dRenderTarget</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mat44f;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_scissor_rect" kindref="compound">ScissorRect</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_viewport" kindref="compound">Viewport</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TexPixel32;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_desc" kindref="compound">RenderPassDesc</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_area" kindref="compound">RenderPassArea</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_pass_target" kindref="compound">RenderPassTarget</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_render_target" kindref="compound">RenderTarget</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResourceHeapGroup;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResourceHeap;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_resource_heap_group_properties" kindref="compound">ResourceHeapGroupProperties</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tile_mapping" kindref="compound">TileMapping</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_texture_tiling_info" kindref="compound">TextureTilingInfo</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>DepthAccess;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Drv3dCommand;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ResourceActivationAction<sp/>:<sp/>unsigned;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">using<sp/>ResourceHeapCreateFlags<sp/>=<sp/>uint32_t;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">typedef<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/><ref refid="class_base_texture" kindref="compound">Texture</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">namespace<sp/>ddsx</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Header;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function-pointers<sp/>table<sp/>that<sp/>mirrors<sp/>d3d<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="struct_d3d_interface_table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_d3d_interface_table" kindref="compound">D3dInterfaceTable</ref></highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*get_driver_name)();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*get_device_driver_version)();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*get_device_name)();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*get_last_error)();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>uint32_t<sp/>(*get_last_error_code)();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*get_device)();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref><sp/>&amp;(*get_driver_desc)();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>int<sp/>(*driver_command)(Drv3dCommand<sp/>command,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*par1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*par2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*par3);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>bool<sp/>(*device_lost)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*can_reset_now);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>bool<sp/>(*reset_device)();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>bool<sp/>(*is_in_device_reset_now)();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>bool<sp/>(*is_window_occluded)();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>bool<sp/>(*should_use_compute_for_image_processing)(std::initializer_list&lt;unsigned&gt;<sp/>formats);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>unsigned<sp/>(*get_texformat_usage)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restype);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>bool<sp/>(*check_texformat)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>int<sp/>(*get_max_sample_count)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>bool<sp/>(*issame_texformat)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>bool<sp/>(*check_cubetexformat)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>bool<sp/>(*check_voltexformat)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cflg);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*create_tex_0)(TexImage32<sp/>*img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*create_cubetex_0)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*create_voltex)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*create_array_tex)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*create_cube_array_tex)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>side,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*create_ddsx_tex)(IGenLoad<sp/>&amp;crd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*alloc_ddsx_tex)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ddsx::Header<sp/>&amp;hdr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stub_tex_idx);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*alias_tex_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/>TexImage32<sp/>*img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*alias_cubetex_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*alias_voltex_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*alias_array_tex_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*alias_cube_array_tex_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>side,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>bool<sp/>(*stretch_rect_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*src,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dst,<sp/>RectInt<sp/>*rsrc,<sp/>RectInt<sp/>*rdst);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>bool<sp/>(*copy_from_current_render_target)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*to_tex);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>void<sp/>(*get_texture_statistics)(uint32_t<sp/>*num_textures,<sp/>uint64_t<sp/>*total_mem,<sp/>String<sp/>*out_dump);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>d3d::SamplerHandle<sp/>(*request_sampler)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structd3d_1_1_sampler_info" kindref="compound">d3d::SamplerInfo</ref><sp/>&amp;sampler_info);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>void<sp/>(*set_sampler)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/>d3d::SamplerHandle<sp/>sampler);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>bool<sp/>(*settex)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stage,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>bool<sp/>(*settex_vs)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stage,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>PROGRAM<sp/>(*create_program_0)(VPROG,<sp/>FSHADER,<sp/>VDECL,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*,<sp/>unsigned);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>PROGRAM<sp/>(*create_program_1)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*,<sp/>VDECL,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*,<sp/>unsigned);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>PROGRAM<sp/>(*create_program_cs)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*cs_native,<sp/>CSPreloaded<sp/>preloaded);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_program)(PROGRAM);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>void<sp/>(*delete_program)(PROGRAM);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>VPROG<sp/>(*create_vertex_shader)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*native_code);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>VPROG<sp/>(*create_vertex_shader_dagor)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VPRTYPE<sp/>*tokens,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>VPROG<sp/>(*create_vertex_shader_asm)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*asm_text);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>VPROG<sp/>(*create_vertex_shader_hlsl)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hlsl_text);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>void<sp/>(*delete_vertex_shader)(VPROG<sp/>vs);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_vertex_shader)(VPROG<sp/>ps);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_const)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reg_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_regs);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_immediate_const)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_words);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>FSHADER<sp/>(*create_pixel_shader)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*native_code);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>FSHADER<sp/>(*create_pixel_shader_dagor)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSHTYPE<sp/>*tokens,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>FSHADER<sp/>(*create_pixel_shader_asm)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*asm_text);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>FSHADER<sp/>(*create_pixel_shader_hlsl)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hlsl_text);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>void<sp/>(*delete_pixel_shader)(FSHADER<sp/>ps);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_pixel_shader)(FSHADER<sp/>ps);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>int<sp/>(*set_vs_constbuffer_size)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>required_size);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>int<sp/>(*set_cs_constbuffer_size)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>required_size);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_const_buffer)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer,<sp/>uint32_t<sp/>consts_offset,<sp/>uint32_t<sp/>consts_size);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>uint32_t<sp/>(*register_bindless_sampler_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*texture);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>uint32_t<sp/>(*register_bindless_sampler_1)(d3d::SamplerHandle<sp/>sampler);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>register_bindless_sampler(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*texture)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>register_bindless_sampler_0(texture);<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>register_bindless_sampler(d3d::SamplerHandle<sp/>sampler)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>register_bindless_sampler_1(sampler);<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>uint32_t<sp/>(*allocate_bindless_resource_range)(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>uint32_t<sp/>(*resize_bindless_resource_range)(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>current_count,<sp/>uint32_t<sp/>new_count);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>void<sp/>(*free_bindless_resource_range)(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>void<sp/>(*update_bindless_resource)(uint32_t<sp/>index,<sp/><ref refid="class_d3d_resource" kindref="compound">D3dResource</ref><sp/>*res);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>void<sp/>(*update_bindless_resources_to_null)(uint32_t<sp/>resource_type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>count);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_tex)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_sampler);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_rwtex)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>uint32_t,<sp/>uint32_t,<sp/>bool);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>bool<sp/>(*clear_rwtexi)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val[4],<sp/>uint32_t,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>bool<sp/>(*clear_rwtexf)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val[4],<sp/>uint32_t,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>bool<sp/>(*clear_rwbufi)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val[4]);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>bool<sp/>(*clear_rwbuff)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val[4]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>bool<sp/>(*clear_rt)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;rt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>&amp;clear_val);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_buffer)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_rwbuffer)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shader_stage,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>slot,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*(*create_vb_0)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*(*create_ib)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*(*create_sbuffer)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>struct_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elements,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>texfmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_depth_0)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*,<sp/>DepthAccess);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_depth_1)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,<sp/>DepthAccess);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_render_target_0)();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_render_target_1)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rt_index,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*,<sp/>uint8_t<sp/>level);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_render_target_2)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rt_index,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fc,<sp/>uint8_t<sp/>level);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_render_target_3)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_render_target" kindref="compound">Driver3dRenderTarget</ref><sp/>&amp;rt);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>void<sp/>(*get_render_target)(<ref refid="struct_driver3d_render_target" kindref="compound">Driver3dRenderTarget</ref><sp/>&amp;out_rt);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>bool<sp/>(*get_target_size)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>bool<sp/>(*get_render_target_size)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*rt_tex,<sp/>uint8_t<sp/>level);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>void<sp/>(*set_variable_rate_shading)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rate_x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rate_y,<sp/>VariableRateShadingCombiner<sp/>vertex_combiner,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>VariableRateShadingCombiner<sp/>pixel_combiner);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>void<sp/>(*set_variable_rate_shading_texture)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*rate_texture);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>bool<sp/>(*settm_0)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix44<sp/>*tm);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>bool<sp/>(*settm_1)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;tm);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>void<sp/>(*settm_2)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;tm);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>bool<sp/>(*gettm_0)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>Matrix44<sp/>*out_tm);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>bool<sp/>(*gettm_1)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>TMatrix<sp/>&amp;out_tm);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>void<sp/>(*gettm_2)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>mat44f<sp/>&amp;out_tm);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;(*gettm_cref)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>void<sp/>(*getm2vtm)(TMatrix<sp/>&amp;out_m2v);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>void<sp/>(*setglobtm)(Matrix44<sp/>&amp;m);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>void<sp/>(*getglobtm)(Matrix44<sp/>&amp;);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>bool<sp/>(*setpersp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;,<sp/>TMatrix4<sp/>*);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>bool<sp/>(*getpersp)(<ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>bool<sp/>(*validatepersp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>bool<sp/>(*calcproj_0)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;,<sp/>TMatrix4<sp/>&amp;);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>bool<sp/>(*calcproj_1)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;,<sp/>mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>void<sp/>(*calcglobtm_0)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;,<sp/>mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>void<sp/>(*calcglobtm_1)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;,<sp/>mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>void<sp/>(*calcglobtm_2)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix4<sp/>&amp;,<sp/>TMatrix4<sp/>&amp;);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>void<sp/>(*calcglobtm_3)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_perspective" kindref="compound">Driver3dPerspective</ref><sp/>&amp;,<sp/>TMatrix4<sp/>&amp;);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>void<sp/>(*getglobtm_vec)(mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>void<sp/>(*setglobtm_vec)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>bool<sp/>(*setscissor)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>bool<sp/>(*setscissors)(dag::ConstSpan&lt;ScissorRect&gt;<sp/>scissorRects);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>bool<sp/>(*setview)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxz);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>bool<sp/>(*setviews)(dag::ConstSpan&lt;Viewport&gt;<sp/>viewports);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>bool<sp/>(*getview)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;minz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;maxz);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>bool<sp/>(*clearview)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>what,<sp/>E3DCOLOR,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/>uint32_t<sp/>stencil);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>bool<sp/>(*update_screen)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>app_active);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>void<sp/>(*wait_for_async_present)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>void<sp/>(*gpu_latency_wait)();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>bool<sp/>(*setvsrc_ex)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*vb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>bool<sp/>(*setind)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*ib);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>VDECL<sp/>(*create_vdecl)(VSDTYPE<sp/>*vsd);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>void<sp/>(*delete_vdecl)(VDECL<sp/>vdecl);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>bool<sp/>(*setvdecl)(VDECL<sp/>vdecl);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>bool<sp/>(*draw_base)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/>uint32_t<sp/>num_instances,<sp/>uint32_t<sp/>start_instance);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>bool<sp/>(*drawind_base)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startind,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base_vertex,<sp/>uint32_t<sp/>num_instances,<sp/>uint32_t<sp/>start_instance);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>bool<sp/>(*draw_up)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>bool<sp/>(*drawind_up)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minvert,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numvert,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ind,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>bool<sp/>(*draw_indirect)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer,<sp/>uint32_t<sp/>offset);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>bool<sp/>(*draw_indexed_indirect)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer,<sp/>uint32_t<sp/>offset);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>bool<sp/>(*multi_draw_indirect)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prim_type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>draw_count,<sp/>uint32_t<sp/>stride_bytes,<sp/>uint32_t<sp/>byte_offset);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>bool<sp/>(*multi_draw_indexed_indirect)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prim_type,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>draw_count,<sp/>uint32_t<sp/>stride_bytes,<sp/>uint32_t<sp/>byte_offset);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>bool<sp/>(*dispatch)(uint32_t<sp/>thread_group_x,<sp/>uint32_t<sp/>thread_group_y,<sp/>uint32_t<sp/>thread_group_z,<sp/>GpuPipeline<sp/>gpu_pipeline);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>bool<sp/>(*dispatch_indirect)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buffer,<sp/>uint32_t<sp/>offset,<sp/>GpuPipeline<sp/>gpu_pipeline);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>void<sp/>(*dispatch_mesh)(uint32_t<sp/>thread_group_x,<sp/>uint32_t<sp/>thread_group_y,<sp/>uint32_t<sp/>thread_group_z);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>void<sp/>(*dispatch_mesh_indirect)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>dispatch_count,<sp/>uint32_t<sp/>stride_bytes,<sp/>uint32_t<sp/>byte_offset);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>void<sp/>(*dispatch_mesh_indirect_count)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*args,<sp/>uint32_t<sp/>args_stride_bytes,<sp/>uint32_t<sp/>args_byte_offset,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*count,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count_byte_offset,<sp/>uint32_t<sp/>max_count);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>GPUFENCEHANDLE<sp/>(*insert_fence)(GpuPipeline<sp/>gpu_pipeline);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>void<sp/>(*insert_wait_on_fence)(GPUFENCEHANDLE<sp/>&amp;fence,<sp/>GpuPipeline<sp/>gpu_pipeline);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>shaders::DriverRenderStateId<sp/>(*create_render_state)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structshaders_1_1_render_state" kindref="compound">shaders::RenderState</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_render_state)(shaders::DriverRenderStateId);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>void<sp/>(*clear_render_states)();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_blend_factor)(E3DCOLOR<sp/>color);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>bool<sp/>(*setstencil)(uint32_t<sp/>ref);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>bool<sp/>(*setwire)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_srgb_backbuffer_write)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>on);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>bool<sp/>(*setgamma)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>power);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>float<sp/>(*get_screen_aspect_ratio)();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>void<sp/>(*change_screen_aspect_ratio)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ar);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*fast_capture_screen)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;stride_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;format);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>void<sp/>(*end_fast_capture_screen)();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>TexPixel32<sp/>*(*capture_screen)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;stride_bytes);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>void<sp/>(*release_capture_buffer)();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>void<sp/>(*get_screen_size)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;h);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_depth_bounds)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zmn,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zmx);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>int<sp/>(*create_predicate)();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>void<sp/>(*free_predicate)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>bool<sp/>(*begin_survey)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>void<sp/>(*end_survey)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>void<sp/>(*begin_conditional_render)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>void<sp/>(*end_conditional_render)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>VDECL<sp/>(*get_program_vdecl)(PROGRAM<sp/>p);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>bool<sp/>(*get_vrr_supported)();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>bool<sp/>(*get_vsync_enabled)();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>bool<sp/>(*enable_vsync)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>d3d::EventQuery<sp/>*(*create_event_query)();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>void<sp/>(*release_event_query)(d3d::EventQuery<sp/>*q);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>bool<sp/>(*issue_event_query)(d3d::EventQuery<sp/>*q);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>bool<sp/>(*get_event_query_status)(d3d::EventQuery<sp/>*q,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_flush);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>void<sp/>(*set_present_wnd)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hwnd);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>bool<sp/>(*set_capture_full_frame_buffer)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ison);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>unsigned<sp/>(*get_texture_format)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*get_texture_format_str)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>void<sp/>(*get_video_modes_list)(Tab&lt;String&gt;<sp/>&amp;list);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>PROGRAM<sp/>(*get_debug_program)();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>void<sp/>(*beginEvent)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>void<sp/>(*endEvent)();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">Texture</ref><sp/>*(*get_backbuffer_tex)();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">Texture</ref><sp/>*(*get_secondary_backbuffer_tex)();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rayTrace/rayTrace3di.inl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>void<sp/>(*resource_barrier)(<ref refid="class_resource_barrier_desc" kindref="compound">ResourceBarrierDesc</ref><sp/>desc,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>GpuPipeline::GRAPHICS*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>d3d::RenderPass<sp/>*(*create_render_pass)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_desc" kindref="compound">RenderPassDesc</ref><sp/>&amp;rp_desc);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>void<sp/>(*delete_render_pass)(d3d::RenderPass<sp/>*rp);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>void<sp/>(*begin_render_pass)(d3d::RenderPass<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_area" kindref="compound">RenderPassArea</ref><sp/>area,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_render_pass_target" kindref="compound">RenderPassTarget</ref><sp/>*targets);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>void<sp/>(*next_subpass)();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>void<sp/>(*end_render_pass)();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>void<sp/>(*allow_render_pass_target_load)();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref><sp/>(*get_resource_allocation_properties)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>ResourceHeap<sp/>*(*create_resource_heap)(ResourceHeapGroup<sp/>*heap_group,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>ResourceHeapCreateFlags<sp/>flags);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>void<sp/>(*destroy_resource_heap)(ResourceHeap<sp/>*heap);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*(*place_buffer_in_resource_heap)(ResourceHeap<sp/>*heap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref><sp/>&amp;alloc_info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*(*place_texture_in_resource_heap)(ResourceHeap<sp/>*heap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_description" kindref="compound">ResourceDescription</ref><sp/>&amp;desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_resource_allocation_properties" kindref="compound">ResourceAllocationProperties</ref><sp/>&amp;alloc_info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="struct_resource_heap_group_properties" kindref="compound">ResourceHeapGroupProperties</ref><sp/>(*get_resource_heap_group_properties)(ResourceHeapGroup<sp/>*heap_group);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>void<sp/>(*map_tile_to_resource)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceHeap<sp/>*heap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_tile_mapping" kindref="compound">TileMapping</ref><sp/>*mapping,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mapping_count);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="struct_texture_tiling_info" kindref="compound">TextureTilingInfo</ref><sp/>(*get_texture_tiling_info)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subresource);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>void<sp/>(*activate_buffer)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>ResourceActivationAction<sp/>action,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>&amp;value,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>GpuPipeline<sp/>gpu_pipeline<sp/></highlight><highlight class="comment">/*=<sp/>GpuPipeline::GRAPHICS*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>void<sp/>(*activate_texture)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>ResourceActivationAction<sp/>action,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="union_resource_clear_value" kindref="compound">ResourceClearValue</ref><sp/>&amp;value,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>GpuPipeline<sp/>gpu_pipeline<sp/></highlight><highlight class="comment">/*=<sp/>GpuPipeline::GRAPHICS*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>void<sp/>(*deactivate_buffer)(<ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*buf,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/></highlight><highlight class="comment">/*=<sp/>GpuPipeline::GRAPHICS*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>void<sp/>(*deactivate_texture)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>GpuPipeline<sp/>gpu_pipeline<sp/></highlight><highlight class="comment">/*=<sp/>GpuPipeline::GRAPHICS*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>d3d::ResUpdateBuffer<sp/>*(*allocate_update_buffer_for_tex_region)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dest_base_texture,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dest_mip,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dest_slice,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset_x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset_y,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset_z,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>depth);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>d3d::ResUpdateBuffer<sp/>*(*allocate_update_buffer_for_tex)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dest_tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_mip,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_slice);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>void<sp/>(*release_update_buffer)(d3d::ResUpdateBuffer<sp/>*&amp;rub);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*get_update_buffer_addr_for_write)(d3d::ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>size_t<sp/>(*get_update_buffer_size)(d3d::ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>size_t<sp/>(*get_update_buffer_pitch)(d3d::ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>size_t<sp/>(*get_update_buffer_slice_pitch)(d3d::ResUpdateBuffer<sp/>*rub);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>bool<sp/>(*update_texture_and_release_update_buffer)(d3d::ResUpdateBuffer<sp/>*&amp;src_rub);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*get_native_surface)(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>bool<sp/>(*start_capture)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*savepath);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>void<sp/>(*stop_capture)();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inline<sp/>wrappers<sp/>for<sp/>overloaded<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*create_vb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_vb_0(size_bytes,<sp/>flags,<sp/>name);<sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*create_tex(TexImage32<sp/>*img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_tex_0(img,<sp/>w,<sp/>h,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stretch_rect(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*src,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*dst,<sp/>RectInt<sp/>*rsrc<sp/>=<sp/>NULL,<sp/>RectInt<sp/>*rdst<sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stretch_rect_0(src,<sp/>dst,<sp/>rsrc,<sp/>rdst);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setvsrc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream,<sp/><ref refid="class_sbuffer" kindref="compound">Sbuffer</ref><sp/>*vb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_bytes)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setvsrc_ex(stream,<sp/>vb,<sp/>0,<sp/>stride_bytes);<sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*create_cubetex(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_cubetex_0(size,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_tex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/>TexImage32<sp/>*img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alias_tex_0(baseTexture,<sp/>img,<sp/>w,<sp/>h,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_cubetex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alias_cubetex_0(baseTexture,<sp/>size,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_voltex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name<sp/>=<sp/>NULL)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alias_voltex_0(baseTexture,<sp/>w,<sp/>h,<sp/>d,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_array_tex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alias_array_tex_0(baseTexture,<sp/>w,<sp/>h,<sp/>d,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*alias_cube_array_tex(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*baseTexture,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>side,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stat_name)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alias_cube_array_tex_0(baseTexture,<sp/>side,<sp/>d,<sp/>flg,<sp/>levels,<sp/>stat_name);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_render_target()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_render_target_0();<sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_render_target(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ri,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_render_target_2(ri,<sp/>tex,<sp/>fc,<sp/>level);<sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_render_target(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rt_index,<sp/><ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_render_target_1(rt_index,<sp/>tex,<sp/>level);<sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_render_target(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_driver3d_render_target" kindref="compound">Driver3dRenderTarget</ref><sp/>&amp;rt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_render_target_3(rt);<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_depth(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/>DepthAccess<sp/>access)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_depth_0(tex,<sp/>access);<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_depth(<ref refid="class_base_texture" kindref="compound">BaseTexture</ref><sp/>*tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,<sp/>DepthAccess<sp/>access)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_depth_1(tex,<sp/>layer,<sp/>access);<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>settm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix44<sp/>*tm)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settm_0(which,<sp/>tm);<sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>settm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrix<sp/>&amp;tm)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settm_1(which,<sp/>tm);<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>settm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat44f<sp/>&amp;tm)<sp/>{<sp/>settm_2(which,<sp/>tm);<sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gettm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>Matrix44<sp/>*out_tm)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gettm_0(which,<sp/>out_tm);<sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gettm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>TMatrix<sp/>&amp;out_tm)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gettm_1(which,<sp/>out_tm);<sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gettm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which,<sp/>mat44f<sp/>&amp;out_tm)<sp/>{<sp/>gettm_2(which,<sp/>out_tm);<sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>ShaderLibrary<sp/>(*create_shader_library)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_shader_library_create_info" kindref="compound">ShaderLibraryCreateInfo</ref><sp/>&amp;slci);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>void<sp/>(*destroy_shader_library)(ShaderLibrary<sp/>library);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="class_driver_code" kindref="compound">DriverCode</ref><sp/>driverCode;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*driverName;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*driverVer;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*deviceName;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="struct_driver3d_desc" kindref="compound">Driver3dDesc</ref><sp/>drvDesc;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function-pointers<sp/>table<sp/>instance<sp/>(coud<sp/>be<sp/>used<sp/>for<sp/>deferred<sp/>d3d<sp/>API<sp/>calls)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_d3d_interface_table" kindref="compound">D3dInterfaceTable</ref><sp/>d3di;</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/DagorEngine/DagorEngine/prog/dagorInclude/drv/3d/dag_interface_table.h"/>
  </compounddef>
</doxygen>
